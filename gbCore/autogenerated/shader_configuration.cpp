// autogenerated: do not add any changes
#include "shader_configuration.h"
namespace gb
{
std::string shader_configuration::get_filename(void) const
{
const auto& iterator = m_attributes.find("/shader/filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void shader_configuration::set_filename(std::string filename)
{
configuration::set_attribute("/shader/filename", std::make_shared<configuration_attribute>(filename));
}
#endif
void shader_configuration::serialize_xml(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/shader").c_str());
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/shader/filename", std::make_shared<configuration_attribute>(filename));
}
void shader_configuration::serialize_json(Json::Value& json)
{
std::string filename = json.get("filename", "unknown").asString();
configuration::set_attribute("/shader/filename", std::make_shared<configuration_attribute>(filename));
}
void shader_configuration::serialize_xml(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/shader/filename", std::make_shared<configuration_attribute>(filename));
}
}
