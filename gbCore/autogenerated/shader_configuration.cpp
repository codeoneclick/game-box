// autogenerated: do not add any changes
#include "shader_configuration.h"
namespace gb
{
std::string shader_configuration::get_vs_filename(void) const
{
const auto& iterator = m_attributes.find("/shader/vs_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void shader_configuration::set_vs_filename(std::string vs_filename)
{
configuration::set_attribute("/shader/vs_filename", std::make_shared<configuration_attribute>(vs_filename));
}
#endif
std::string shader_configuration::get_fs_filename(void) const
{
const auto& iterator = m_attributes.find("/shader/fs_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void shader_configuration::set_fs_filename(std::string fs_filename)
{
configuration::set_attribute("/shader/fs_filename", std::make_shared<configuration_attribute>(fs_filename));
}
#endif
void shader_configuration::serialize(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/shader").c_str());
std::string vs_filename = node.node().attribute("vs_filename").as_string();
configuration::set_attribute("/shader/vs_filename", std::make_shared<configuration_attribute>(vs_filename));
std::string fs_filename = node.node().attribute("fs_filename").as_string();
configuration::set_attribute("/shader/fs_filename", std::make_shared<configuration_attribute>(fs_filename));
}
#if defined(__EDITOR__)
void shader_configuration::deserialize(pugi::xml_node& node)
{
pugi::xml_attribute attribute;
attribute = node.append_attribute("vs_filename");
std::string vs_filename = shader_configuration::get_vs_filename();
attribute.set_value(vs_filename.c_str());
attribute = node.append_attribute("fs_filename");
std::string fs_filename = shader_configuration::get_fs_filename();
attribute.set_value(fs_filename.c_str());
}
#endif
void shader_configuration::serialize(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string vs_filename = node.node().attribute("vs_filename").as_string();
configuration::set_attribute("/shader/vs_filename", std::make_shared<configuration_attribute>(vs_filename));
std::string fs_filename = node.node().attribute("fs_filename").as_string();
configuration::set_attribute("/shader/fs_filename", std::make_shared<configuration_attribute>(fs_filename));
}
}
