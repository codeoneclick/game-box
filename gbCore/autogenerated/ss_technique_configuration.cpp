// autogenerated: do not add any changes
#include "ss_technique_configuration.h"
namespace gb
{
std::string ss_technique_configuration::get_guid(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::set_guid(std::string guid)
{
configuration::set_attribute("/ss_technique/guid", std::make_shared<configuration_attribute>(guid));
}
#endif
ui32 ss_technique_configuration::get_screen_width(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_width");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::set_screen_width(ui32 screen_width)
{
configuration::set_attribute("/ss_technique/screen_width", std::make_shared<configuration_attribute>(screen_width));
}
#endif
ui32 ss_technique_configuration::get_screen_height(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_height");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::set_screen_height(ui32 screen_height)
{
configuration::set_attribute("/ss_technique/screen_height", std::make_shared<configuration_attribute>(screen_height));
}
#endif
std::shared_ptr<gb::material_configuration> ss_technique_configuration::get_material_configuration(void) const
{
const auto& iterator = m_configurations.find("/ss_technique/material");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<gb::material_configuration>(iterator->second.at(0));
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::set_material_configuration(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/ss_technique/material", material, 0);
}
#endif
std::vector<std::shared_ptr<configuration>> ss_technique_configuration::get_attachments_configurations(void) const
{
const auto& iterator = m_configurations.find("/ss_technique/attachments/attachment");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::add_attachments_configurations(const std::shared_ptr<gb::attachment_configuration>& attachment)
{
configuration::set_configuration("/ss_technique/attachments/attachment", attachment);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void ss_technique_configuration::set_attachments_configurations(const std::shared_ptr<gb::attachment_configuration>& attachment, i32 index)
{
configuration::set_configuration("/ss_technique/attachments/attachment", attachment, index);
}
#endif
void ss_technique_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ss_technique");
std::string guid = node.node().attribute("guid").as_string();
configuration::set_attribute("/ss_technique/guid", std::make_shared<configuration_attribute>(guid));
ui32 screen_width = node.node().attribute("screen_width").as_uint();
configuration::set_attribute("/ss_technique/screen_width", std::make_shared<configuration_attribute>(screen_width));
ui32 screen_height = node.node().attribute("screen_height").as_uint();
configuration::set_attribute("/ss_technique/screen_height", std::make_shared<configuration_attribute>(screen_height));
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
pugi::xpath_node material_node = document.select_single_node("/ss_technique/material");
std::string external_filename =material_node.node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/ss_technique/material", material);
pugi::xpath_node_set attachment_nodes = document.select_nodes("/ss_technique/attachments/attachment");
for (pugi::xpath_node_set::const_iterator iterator = attachment_nodes.begin(); iterator != attachment_nodes.end(); ++iterator)
{
std::shared_ptr<gb::attachment_configuration> attachment = std::make_shared<gb::attachment_configuration>();
pugi::xpath_node node = (*iterator);
attachment->serialize_xml(document, node);
configuration::set_configuration("/ss_technique/attachments/attachment", attachment);
}
}
void ss_technique_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string guid = json.get("guid", "unknown").asString();
configuration::set_attribute("/ss_technique/guid", std::make_shared<configuration_attribute>(guid));
ui32 screen_width = json.get("screen_width", 0).asUInt();
configuration::set_attribute("/ss_technique/screen_width", std::make_shared<configuration_attribute>(screen_width));
ui32 screen_height = json.get("screen_height", 0).asUInt();
configuration::set_attribute("/ss_technique/screen_height", std::make_shared<configuration_attribute>(screen_height));
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
Json::Value material_json = json["material"];
std::string external_filename =material_json.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/ss_technique/material", material);
Json::Value attachments_json_array = json["attachments"];
for (Json::ValueIterator iterator = attachments_json_array.begin(); iterator != attachments_json_array.end(); ++iterator)
{
std::shared_ptr<gb::attachment_configuration> attachment = std::make_shared<gb::attachment_configuration>();
Json::Value json_value = (*iterator);
attachment->serialize_json(json_value);
configuration::set_configuration("/ss_technique/attachments/attachment", attachment);
}
}
}
