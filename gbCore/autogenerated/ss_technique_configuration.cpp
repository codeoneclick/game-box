// autogenerated: do not add any changes
#include "ss_technique_configuration.h"
namespace gb
{
std::string ss_technique_configuration::get_guid(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ss_technique_configuration::set_guid(std::string guid)
{
configuration::set_attribute("/ss_technique/guid", std::make_shared<configuration_attribute>(guid));
}
#endif
ui32 ss_technique_configuration::get_screen_width(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_width");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ss_technique_configuration::set_screen_width(ui32 screen_width)
{
configuration::set_attribute("/ss_technique/screen_width", std::make_shared<configuration_attribute>(screen_width));
}
#endif
ui32 ss_technique_configuration::get_screen_height(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_height");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ss_technique_configuration::set_screen_height(ui32 screen_height)
{
configuration::set_attribute("/ss_technique/screen_height", std::make_shared<configuration_attribute>(screen_height));
}
#endif
std::shared_ptr<gb::material_configuration> ss_technique_configuration::get_ConfigurationMaterial(void) const
{
const auto& iterator = m_configurations.find("/ss_technique/material");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<gb::material_configuration>(iterator->second.at(0));
}
#if defined(__EDITOR__)
void ss_technique_configuration::set_ConfigurationMaterial(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/ss_technique/material", material, 0);
}
#endif
void ss_technique_configuration::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml_document(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ss_technique");
std::string guid = node.node().attribute("guid").as_string();
configuration::set_attribute("/ss_technique/guid", std::make_shared<configuration_attribute>(guid));
ui32 screen_width = node.node().attribute("screen_width").as_uint();
configuration::set_attribute("/ss_technique/screen_width", std::make_shared<configuration_attribute>(screen_width));
ui32 screen_height = node.node().attribute("screen_height").as_uint();
configuration::set_attribute("/ss_technique/screen_height", std::make_shared<configuration_attribute>(screen_height));
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
pugi::xpath_node material_node = document.select_single_node("/ss_technique/material");
material->serialize(material_node.node().attribute("filename").as_string());
configuration::set_configuration("/ss_technique/material", material);
}
#if defined(__EDITOR__)
void ss_technique_configuration::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("ss_technique");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("guid");
std::string guid = ss_technique_configuration::get_guid();
attribute.set_value(guid.c_str());
attribute = node.append_attribute("screen_width");
ui32 screen_width = ss_technique_configuration::get_screen_width();
attribute.set_value(screen_width);
attribute = node.append_attribute("screen_height");
ui32 screen_height = ss_technique_configuration::get_screen_height();
attribute.set_value(screen_height);
node = parent_node.append_child("material");
attribute = node.append_attribute("filename");
attribute.set_value(configuration::get_filename().c_str());
document.save_file(filename.c_str());
}
#endif
}
