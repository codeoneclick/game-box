// autogenerated: do not add any changes
#ifndef model_configuration_h
#define model_configuration_h
#include "configuration.h"
#include "material_configuration.h"
#include "animation_configuration.h"
namespace gb
{
class model_configuration : public game_object_configuration
{
public:
model_configuration(void) = default;
~model_configuration(void) = default;
std::string get_mesh_filename(void) const;
#if defined(__EDITOR__)
void set_mesh_filename(std::string mesh_filename);
#endif
std::string get_mesh_base_class(void) const;
#if defined(__EDITOR__)
void set_mesh_base_class(std::string mesh_base_class);
#endif
i32 get_z_order(void) const;
#if defined(__EDITOR__)
void set_z_order(i32 z_order);
#endif
bool get_batching(void) const;
#if defined(__EDITOR__)
void set_batching(bool is_batching);
#endif
std::vector<std::shared_ptr<configuration>> get_materials_configurations(void) const;
#if defined(__EDITOR__)
void add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material);
#endif
#if defined(__EDITOR__)
void set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index);
#endif
std::vector<std::shared_ptr<configuration>> get_animations_configurations(void) const;
#if defined(__EDITOR__)
void add_animations_configurations(const std::shared_ptr<gb::animation_configuration>& animation);
#endif
#if defined(__EDITOR__)
void set_animations_configurations(const std::shared_ptr<gb::animation_configuration>& animation, i32 index);
#endif
void serialize(const std::string& filename);
#if defined(__EDITOR__)
void deserialize(const std::string& filename);
#endif
};
};
#endif
