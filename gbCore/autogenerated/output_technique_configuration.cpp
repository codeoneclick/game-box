// autogenerated: do not add any changes
#include "output_technique_configuration.h"
namespace gb
{
std::string output_technique_configuration::get_guid(void) const
{
const auto& iterator = m_attributes.find("/output_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void output_technique_configuration::set_guid(std::string guid)
{
configuration::set_attribute("/output_technique/guid", std::make_shared<configuration_attribute>(guid));
}
#endif
std::shared_ptr<gb::material_configuration> output_technique_configuration::get_material_configuration(void) const
{
const auto& iterator = m_configurations.find("/output_technique/material");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<gb::material_configuration>(iterator->second.at(0));
}
#if defined(__EDITOR__)
void output_technique_configuration::set_material_configuration(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/output_technique/material", material, 0);
}
#endif
void output_technique_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/output_technique");
std::string guid = node.node().attribute("guid").as_string();
configuration::set_attribute("/output_technique/guid", std::make_shared<configuration_attribute>(guid));
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
pugi::xpath_node material_node = document.select_single_node("/output_technique/material");
std::string external_filename =material_node.node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/output_technique/material", material);
}
void output_technique_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string guid = json.get("guid", "unknown").asString();
configuration::set_attribute("/output_technique/guid", std::make_shared<configuration_attribute>(guid));
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
Json::Value material_json = json["material"];
std::string external_filename =material_json.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/output_technique/material", material);
}
}
