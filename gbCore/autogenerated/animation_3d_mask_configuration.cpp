// autogenerated: do not add any changes
#include "animation_3d_mask_configuration.h"
namespace gb
{
std::vector<std::shared_ptr<configuration>> animation_3d_mask_configuration::get_bone_mask_configurations(void) const
{
const auto& iterator = m_configurations.find("/animation_3d_mask/bones/bone");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_3d_mask_configuration::add_bone_mask_configurations(const std::shared_ptr<gb::animation_3d_bone_mask_configuration>& bone)
{
configuration::set_configuration("/animation_3d_mask/bones/bone", bone);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_3d_mask_configuration::set_bone_mask_configurations(const std::shared_ptr<gb::animation_3d_bone_mask_configuration>& bone, i32 index)
{
configuration::set_configuration("/animation_3d_mask/bones/bone", bone, index);
}
#endif
void animation_3d_mask_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/animation_3d_mask");
pugi::xpath_node_set bone_nodes = document.select_nodes("/animation_3d_mask/bones/bone");
for (pugi::xpath_node_set::const_iterator iterator = bone_nodes.begin(); iterator != bone_nodes.end(); ++iterator)
{
std::shared_ptr<gb::animation_3d_bone_mask_configuration> bone = std::make_shared<gb::animation_3d_bone_mask_configuration>();
pugi::xpath_node node = (*iterator);
bone->serialize_xml(document, node);
configuration::set_configuration("/animation_3d_mask/bones/bone", bone);
}
}
void animation_3d_mask_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
Json::Value bones_json_array = json["bones"];
for (Json::ValueIterator iterator = bones_json_array.begin(); iterator != bones_json_array.end(); ++iterator)
{
std::shared_ptr<gb::animation_3d_bone_mask_configuration> bone = std::make_shared<gb::animation_3d_bone_mask_configuration>();
Json::Value json_value = (*iterator);
bone->serialize_json(json_value);
configuration::set_configuration("/animation_3d_mask/bones/bone", bone);
}
}
}
