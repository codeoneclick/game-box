// autogenerated: do not add any changes
#include "animation_3d_bone_mask_configuration.h"
namespace gb
{
std::string animation_3d_bone_mask_configuration::get_bone_name(void) const
{
const auto& iterator = m_attributes.find("/animation_3d_bone_mask/bone_name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_3d_bone_mask_configuration::set_bone_name(std::string bone_name)
{
configuration::set_attribute("/animation_3d_bone_mask/bone_name", std::make_shared<configuration_attribute>(bone_name));
}
#endif
f32 animation_3d_bone_mask_configuration::get_weight(void) const
{
const auto& iterator = m_attributes.find("/animation_3d_bone_mask/weight");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_3d_bone_mask_configuration::set_weight(f32 weight)
{
configuration::set_attribute("/animation_3d_bone_mask/weight", std::make_shared<configuration_attribute>(weight));
}
#endif
void animation_3d_bone_mask_configuration::serialize_xml(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/animation_3d_bone_mask").c_str());
std::string bone_name = node.node().attribute("bone_name").as_string();
configuration::set_attribute("/animation_3d_bone_mask/bone_name", std::make_shared<configuration_attribute>(bone_name));
f32 weight = node.node().attribute("weight").as_float();
configuration::set_attribute("/animation_3d_bone_mask/weight", std::make_shared<configuration_attribute>(weight));
}
void animation_3d_bone_mask_configuration::serialize_json(Json::Value& json)
{
std::string bone_name = json.get("bone_name", "unknown").asString();
configuration::set_attribute("/animation_3d_bone_mask/bone_name", std::make_shared<configuration_attribute>(bone_name));
f32 weight = json.get("weight", 0.f).asFloat();
configuration::set_attribute("/animation_3d_bone_mask/weight", std::make_shared<configuration_attribute>(weight));
}
void animation_3d_bone_mask_configuration::serialize_xml(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string bone_name = node.node().attribute("bone_name").as_string();
configuration::set_attribute("/animation_3d_bone_mask/bone_name", std::make_shared<configuration_attribute>(bone_name));
f32 weight = node.node().attribute("weight").as_float();
configuration::set_attribute("/animation_3d_bone_mask/weight", std::make_shared<configuration_attribute>(weight));
}
}
