// autogenerated: do not add any changes
#include "texture_configuration.h"
namespace gb
{
std::string texture_configuration::get_texture_filename(void) const
{
const auto& iterator = m_attributes.find("/texture/filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_texture_filename(std::string filename)
{
configuration::set_attribute("/texture/filename", std::make_shared<configuration_attribute>(filename));
}
#endif
std::string texture_configuration::get_render_technique_name(void) const
{
const auto& iterator = m_attributes.find("/texture/render_operation_name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_render_technique_name(std::string render_operation_name)
{
configuration::set_attribute("/texture/render_operation_name", std::make_shared<configuration_attribute>(render_operation_name));
}
#endif
ui32 texture_configuration::get_sampler_index(void) const
{
const auto& iterator = m_attributes.find("/texture/sampler_index");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_sampler_index(ui32 sampler_index)
{
configuration::set_attribute("/texture/sampler_index", std::make_shared<configuration_attribute>(sampler_index));
}
#endif
ui32 texture_configuration::get_wrap_mode(void) const
{
const auto& iterator = m_attributes.find("/texture/wrap_mode");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_wrap_mode(ui32 wrap_mode)
{
configuration::set_attribute("/texture/wrap_mode", std::make_shared<configuration_attribute>(wrap_mode));
}
#endif
ui32 texture_configuration::get_mag_filter(void) const
{
const auto& iterator = m_attributes.find("/texture/mag_filter");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_mag_filter(ui32 mag_filter)
{
configuration::set_attribute("/texture/mag_filter", std::make_shared<configuration_attribute>(mag_filter));
}
#endif
ui32 texture_configuration::get_min_filter(void) const
{
const auto& iterator = m_attributes.find("/texture/min_filter");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void texture_configuration::set_min_filter(ui32 min_filter)
{
configuration::set_attribute("/texture/min_filter", std::make_shared<configuration_attribute>(min_filter));
}
#endif
void texture_configuration::serialize_xml(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/texture").c_str());
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/texture/filename", std::make_shared<configuration_attribute>(filename));
std::string render_operation_name = node.node().attribute("render_operation_name").as_string();
configuration::set_attribute("/texture/render_operation_name", std::make_shared<configuration_attribute>(render_operation_name));
ui32 sampler_index = node.node().attribute("sampler_index").as_uint();
configuration::set_attribute("/texture/sampler_index", std::make_shared<configuration_attribute>(sampler_index));
std::string wrap_mode = node.node().attribute("wrap_mode").as_string();
assert(g_string_to_glenum.find(wrap_mode) != g_string_to_glenum.end());
ui32 wrap_mode_enum = g_string_to_glenum.find(wrap_mode)->second;
configuration::set_attribute("/texture/wrap_mode", std::make_shared<configuration_attribute>(wrap_mode_enum));
std::string mag_filter = node.node().attribute("mag_filter").as_string();
assert(g_string_to_glenum.find(mag_filter) != g_string_to_glenum.end());
ui32 mag_filter_enum = g_string_to_glenum.find(mag_filter)->second;
configuration::set_attribute("/texture/mag_filter", std::make_shared<configuration_attribute>(mag_filter_enum));
std::string min_filter = node.node().attribute("min_filter").as_string();
assert(g_string_to_glenum.find(min_filter) != g_string_to_glenum.end());
ui32 min_filter_enum = g_string_to_glenum.find(min_filter)->second;
configuration::set_attribute("/texture/min_filter", std::make_shared<configuration_attribute>(min_filter_enum));
}
void texture_configuration::serialize_json(Json::Value& json)
{
std::string filename = json.get("filename", "unknown").asString();
configuration::set_attribute("/texture/filename", std::make_shared<configuration_attribute>(filename));
std::string render_operation_name = json.get("render_operation_name", "unknown").asString();
configuration::set_attribute("/texture/render_operation_name", std::make_shared<configuration_attribute>(render_operation_name));
ui32 sampler_index = json.get("sampler_index", 0).asUInt();
configuration::set_attribute("/texture/sampler_index", std::make_shared<configuration_attribute>(sampler_index));
std::string wrap_mode = json.get("wrap_mode", "unknown").asString();
assert(g_string_to_glenum.find(wrap_mode) != g_string_to_glenum.end());
ui32 wrap_mode_enum = g_string_to_glenum.find(wrap_mode)->second;
configuration::set_attribute("/texture/wrap_mode", std::make_shared<configuration_attribute>(wrap_mode_enum));
std::string mag_filter = json.get("mag_filter", "unknown").asString();
assert(g_string_to_glenum.find(mag_filter) != g_string_to_glenum.end());
ui32 mag_filter_enum = g_string_to_glenum.find(mag_filter)->second;
configuration::set_attribute("/texture/mag_filter", std::make_shared<configuration_attribute>(mag_filter_enum));
std::string min_filter = json.get("min_filter", "unknown").asString();
assert(g_string_to_glenum.find(min_filter) != g_string_to_glenum.end());
ui32 min_filter_enum = g_string_to_glenum.find(min_filter)->second;
configuration::set_attribute("/texture/min_filter", std::make_shared<configuration_attribute>(min_filter_enum));
}
void texture_configuration::serialize_xml(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/texture/filename", std::make_shared<configuration_attribute>(filename));
std::string render_operation_name = node.node().attribute("render_operation_name").as_string();
configuration::set_attribute("/texture/render_operation_name", std::make_shared<configuration_attribute>(render_operation_name));
ui32 sampler_index = node.node().attribute("sampler_index").as_uint();
configuration::set_attribute("/texture/sampler_index", std::make_shared<configuration_attribute>(sampler_index));
std::string wrap_mode = node.node().attribute("wrap_mode").as_string();
assert(g_string_to_glenum.find(wrap_mode) != g_string_to_glenum.end());
ui32 wrap_mode_enum = g_string_to_glenum.find(wrap_mode)->second;
configuration::set_attribute("/texture/wrap_mode", std::make_shared<configuration_attribute>(wrap_mode_enum));
std::string mag_filter = node.node().attribute("mag_filter").as_string();
assert(g_string_to_glenum.find(mag_filter) != g_string_to_glenum.end());
ui32 mag_filter_enum = g_string_to_glenum.find(mag_filter)->second;
configuration::set_attribute("/texture/mag_filter", std::make_shared<configuration_attribute>(mag_filter_enum));
std::string min_filter = node.node().attribute("min_filter").as_string();
assert(g_string_to_glenum.find(min_filter) != g_string_to_glenum.end());
ui32 min_filter_enum = g_string_to_glenum.find(min_filter)->second;
configuration::set_attribute("/texture/min_filter", std::make_shared<configuration_attribute>(min_filter_enum));
}
}
