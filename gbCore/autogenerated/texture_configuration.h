// autogenerated: do not add any changes
#ifndef texture_configuration_h
#define texture_configuration_h
#include "configuration.h"
namespace gb
{
class texture_configuration : public configuration
{
public:
texture_configuration(void) = default;
~texture_configuration(void) = default;
bool get_cubemap(void) const;
#if defined(__EDITOR__)
void set_cubemap(bool is_cubemap);
#endif
std::string get_texture_filename(void) const;
#if defined(__EDITOR__)
void set_texture_filename(std::string filename);
#endif
std::string get_texture_filename_x_positive(void) const;
#if defined(__EDITOR__)
void set_texture_filename_x_positive(std::string filename_x_positive);
#endif
std::string get_texture_filename_x_negative(void) const;
#if defined(__EDITOR__)
void set_texture_filename_x_negative(std::string filename_x_negative);
#endif
std::string get_texture_filename_y_positive(void) const;
#if defined(__EDITOR__)
void set_texture_filename_y_positive(std::string filename_y_positive);
#endif
std::string get_texture_filename_y_negative(void) const;
#if defined(__EDITOR__)
void set_texture_filename_y_negative(std::string filename_y_negative);
#endif
std::string get_texture_filename_z_positive(void) const;
#if defined(__EDITOR__)
void set_texture_filename_z_positive(std::string filename_z_positive);
#endif
std::string get_texture_filename_z_negative(void) const;
#if defined(__EDITOR__)
void set_texture_filename_z_negative(std::string filename_z_negative);
#endif
std::string get_render_technique_name(void) const;
#if defined(__EDITOR__)
void set_render_technique_name(std::string render_operation_name);
#endif
ui32 get_sampler_index(void) const;
#if defined(__EDITOR__)
void set_sampler_index(ui32 sampler_index);
#endif
GLenum get_wrap_mode(void) const;
#if defined(__EDITOR__)
void set_wrap_mode(GLenum wrap_mode);
#endif
GLenum get_mag_filter(void) const;
#if defined(__EDITOR__)
void set_mag_filter(GLenum mag_filter);
#endif
GLenum get_min_filter(void) const;
#if defined(__EDITOR__)
void set_min_filter(GLenum min_filter);
#endif
void serialize(pugi::xml_document& document, const std::string& path);
#if defined(__EDITOR__)
void deserialize(pugi::xml_node& node);
#endif
void serialize(pugi::xml_document& document, pugi::xpath_node& node);
};
};
#endif
