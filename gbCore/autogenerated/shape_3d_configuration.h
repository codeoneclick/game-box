// autogenerated: do not add any changes
#ifndef shape_3d_configuration_h
#define shape_3d_configuration_h
#include "configuration.h"
#include "material_configuration.h"
#include "animation_3d_sequence_configuration.h"
namespace gb
{
class shape_3d_configuration : public game_object_configuration
{
public:
shape_3d_configuration(void) = default;
~shape_3d_configuration(void) = default;
std::string get_mesh_filename(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_mesh_filename(std::string mesh_filename);
#endif
std::vector<std::shared_ptr<configuration>> get_materials_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index);
#endif
std::vector<std::shared_ptr<configuration>> get_animations_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_animations_configurations(const std::shared_ptr<gb::animation_3d_sequence_configuration>& animation);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_animations_configurations(const std::shared_ptr<gb::animation_3d_sequence_configuration>& animation, i32 index);
#endif
void serialize_xml(const std::string& filename);
void serialize_json(const std::string& filename);
};
};
#endif
