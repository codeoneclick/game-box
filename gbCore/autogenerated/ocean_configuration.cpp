// autogenerated: do not add any changes
#include "ocean_configuration.h"
namespace gb
{
i32 ocean_configuration::get_size(void) const
{
const auto& iterator = m_attributes.find("/ocean/size");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ocean_configuration::set_size(i32 size)
{
configuration::set_attribute("/ocean/size", std::make_shared<configuration_attribute>(size));
}
#endif
f32 ocean_configuration::get_altitude(void) const
{
const auto& iterator = m_attributes.find("/ocean/altitude");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ocean_configuration::set_altitude(f32 altitude)
{
configuration::set_attribute("/ocean/altitude", std::make_shared<configuration_attribute>(altitude));
}
#endif
f32 ocean_configuration::get_wave_generation_interval(void) const
{
const auto& iterator = m_attributes.find("/ocean/wave_generation_interval");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void ocean_configuration::set_wave_generation_interval(f32 wave_generation_interval)
{
configuration::set_attribute("/ocean/wave_generation_interval", std::make_shared<configuration_attribute>(wave_generation_interval));
}
#endif
std::vector<std::shared_ptr<configuration>> ocean_configuration::get_materials_configurations(void) const
{
const auto& iterator = m_configurations.find("/ocean/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void ocean_configuration::add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/ocean/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void ocean_configuration::set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index)
{
configuration::set_configuration("/ocean/materials/material", material, index);
}
#endif
void ocean_configuration::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml_document(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ocean");
i32 size = node.node().attribute("size").as_int();
configuration::set_attribute("/ocean/size", std::make_shared<configuration_attribute>(size));
f32 altitude = node.node().attribute("altitude").as_float();
configuration::set_attribute("/ocean/altitude", std::make_shared<configuration_attribute>(altitude));
f32 wave_generation_interval = node.node().attribute("wave_generation_interval").as_float();
configuration::set_attribute("/ocean/wave_generation_interval", std::make_shared<configuration_attribute>(wave_generation_interval));
pugi::xpath_node_set material_nodes = document.select_nodes("/ocean/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
material->serialize((*iterator).node().attribute("filename").as_string());
configuration::set_configuration("/ocean/materials/material", material);
}
}
#if defined(__EDITOR__)
void ocean_configuration::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("ocean");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("size");
i32 size = ocean_configuration::get_size();
attribute.set_value(size);
attribute = node.append_attribute("altitude");
f32 altitude = ocean_configuration::get_altitude();
attribute.set_value(altitude);
attribute = node.append_attribute("wave_generation_interval");
f32 wave_generation_interval = ocean_configuration::get_wave_generation_interval();
attribute.set_value(wave_generation_interval);
node = parent_node.append_child("materials");
for(const auto& iterator : ocean_configuration::get_materials_configurations())
{
std::shared_ptr<gb::material_configuration> configuration = std::static_pointer_cast<gb::material_configuration>(iterator);
pugi::xml_node child_node = node.append_child("material");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->get_filename().c_str());
}
document.save_file(filename.c_str());
}
#endif
}
