// autogenerated: do not add any changes
#ifndef particle_emitter_configuration_h
#define particle_emitter_configuration_h
#include "configuration.h"
#include "material_configuration.h"
namespace gb
{
class particle_emitter_configuration : public game_object_configuration
{
public:
particle_emitter_configuration(void) = default;
~particle_emitter_configuration(void) = default;
i32 get_z_order(void) const;
#if defined(__EDITOR__)
void set_z_order(i32 z_order);
#endif
ui32 get_num_particles(void) const;
#if defined(__EDITOR__)
void set_num_particles(ui32 num_particles);
#endif
ui32 get_duration(void) const;
#if defined(__EDITOR__)
void set_duration(ui32 duration);
#endif
f32 get_duration_randomess(void) const;
#if defined(__EDITOR__)
void set_duration_randomess(f32 duration_randomness);
#endif
f32 get_velocity_sensitivity(void) const;
#if defined(__EDITOR__)
void set_velocity_sensitivity(f32 velocity_sensitivity);
#endif
f32 get_min_horizontal_velocity(void) const;
#if defined(__EDITOR__)
void set_min_horizontal_velocity(f32 min_horizontal_velocity);
#endif
f32 get_max_horizontal_velocity(void) const;
#if defined(__EDITOR__)
void set_max_horizontal_velocity(f32 max_horizontal_velocity);
#endif
f32 get_min_vertical_velocity(void) const;
#if defined(__EDITOR__)
void set_min_vertical_velocity(f32 min_vertical_velocity);
#endif
f32 get_max_vertical_velocity(void) const;
#if defined(__EDITOR__)
void set_max_vertical_velocity(f32 max_vertical_velocity);
#endif
f32 get_end_velocity(void) const;
#if defined(__EDITOR__)
void set_end_velocity(f32 end_velocity);
#endif
f32 get_gravity_x(void) const;
#if defined(__EDITOR__)
void set_gravity_x(f32 gravity_x);
#endif
f32 get_gravity_y(void) const;
#if defined(__EDITOR__)
void set_gravity_y(f32 gravity_y);
#endif
f32 get_gravity_z(void) const;
#if defined(__EDITOR__)
void set_gravity_z(f32 gravity_z);
#endif
ui8 get_source_color_r(void) const;
#if defined(__EDITOR__)
void set_source_color_r(ui8 source_color_r);
#endif
ui8 get_source_color_g(void) const;
#if defined(__EDITOR__)
void set_source_color_g(ui8 source_color_g);
#endif
ui8 get_source_color_b(void) const;
#if defined(__EDITOR__)
void set_source_color_b(ui8 source_color_b);
#endif
ui8 get_source_color_a(void) const;
#if defined(__EDITOR__)
void set_source_color_a(ui8 source_color_a);
#endif
ui8 get_destination_color_r(void) const;
#if defined(__EDITOR__)
void set_destination_color_r(ui8 destination_color_r);
#endif
ui8 get_destination_color_g(void) const;
#if defined(__EDITOR__)
void set_destination_color_g(ui8 destination_color_g);
#endif
ui8 get_destination_color_b(void) const;
#if defined(__EDITOR__)
void set_destination_color_b(ui8 destination_color_b);
#endif
ui8 get_destination_color_a(void) const;
#if defined(__EDITOR__)
void set_destination_color_a(ui8 destination_color_a);
#endif
f32 get_source_size_x(void) const;
#if defined(__EDITOR__)
void set_source_size_x(f32 source_size_x);
#endif
f32 get_source_size_y(void) const;
#if defined(__EDITOR__)
void set_source_size_y(f32 source_size_y);
#endif
f32 get_destination_size_x(void) const;
#if defined(__EDITOR__)
void set_destination_size_x(f32 destination_size_x);
#endif
f32 get_destination_size_y(void) const;
#if defined(__EDITOR__)
void set_destination_size_y(f32 destination_size_y);
#endif
ui32 get_min_emitt_interval(void) const;
#if defined(__EDITOR__)
void set_min_emitt_interval(ui32 min_emitt_interval);
#endif
ui32 get_max_emitt_interval(void) const;
#if defined(__EDITOR__)
void set_max_emitt_interval(ui32 max_emitt_interval);
#endif
std::vector<std::shared_ptr<configuration>> get_materials_configurations(void) const;
#if defined(__EDITOR__)
void add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material);
#endif
#if defined(__EDITOR__)
void set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index);
#endif
void serialize(const std::string& filename);
#if defined(__EDITOR__)
void deserialize(const std::string& filename);
#endif
};
};
#endif
