// autogenerated: do not add any changes
#include "heightmap_configuration.h"
namespace gb
{
std::string heightmap_configuration::get_heightmap_data_filename(void) const
{
const auto& iterator = m_attributes.find("/heightmap/heightmap_data_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void heightmap_configuration::set_heightmap_data_filename(std::string heightmap_data_filename)
{
configuration::set_attribute("/heightmap/heightmap_data_filename", std::make_shared<configuration_attribute>(heightmap_data_filename));
}
#endif
i32 heightmap_configuration::get_heightmap_chunk_size_x(void) const
{
const auto& iterator = m_attributes.find("/heightmap/heightmap_chunk_size_x");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void heightmap_configuration::set_heightmap_chunk_size_x(i32 heightmap_chunk_size_x)
{
configuration::set_attribute("/heightmap/heightmap_chunk_size_x", std::make_shared<configuration_attribute>(heightmap_chunk_size_x));
}
#endif
i32 heightmap_configuration::get_heightmap_chunk_size_y(void) const
{
const auto& iterator = m_attributes.find("/heightmap/heightmap_chunk_size_y");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void heightmap_configuration::set_heightmap_chunk_size_y(i32 heightmap_chunk_size_y)
{
configuration::set_attribute("/heightmap/heightmap_chunk_size_y", std::make_shared<configuration_attribute>(heightmap_chunk_size_y));
}
#endif
std::string heightmap_configuration::get_splatting_diffuse_texture_preprocessing_material_filename(void) const
{
const auto& iterator = m_attributes.find("/heightmap/splatting_diffuse_texture_preprocessing_material_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void heightmap_configuration::set_splatting_diffuse_texture_preprocessing_material_filename(std::string splatting_diffuse_texture_preprocessing_material_filename)
{
configuration::set_attribute("/heightmap/splatting_diffuse_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_diffuse_texture_preprocessing_material_filename));
}
#endif
std::string heightmap_configuration::get_splatting_normal_texture_preprocessing_material_filename(void) const
{
const auto& iterator = m_attributes.find("/heightmap/splatting_normal_texture_preprocessing_material_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void heightmap_configuration::set_splatting_normal_texture_preprocessing_material_filename(std::string splatting_normal_texture_preprocessing_material_filename)
{
configuration::set_attribute("/heightmap/splatting_normal_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_normal_texture_preprocessing_material_filename));
}
#endif
void heightmap_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/heightmap");
std::string heightmap_data_filename = node.node().attribute("heightmap_data_filename").as_string();
configuration::set_attribute("/heightmap/heightmap_data_filename", std::make_shared<configuration_attribute>(heightmap_data_filename));
i32 heightmap_chunk_size_x = node.node().attribute("heightmap_chunk_size_x").as_int();
configuration::set_attribute("/heightmap/heightmap_chunk_size_x", std::make_shared<configuration_attribute>(heightmap_chunk_size_x));
i32 heightmap_chunk_size_y = node.node().attribute("heightmap_chunk_size_y").as_int();
configuration::set_attribute("/heightmap/heightmap_chunk_size_y", std::make_shared<configuration_attribute>(heightmap_chunk_size_y));
std::string splatting_diffuse_texture_preprocessing_material_filename = node.node().attribute("splatting_diffuse_texture_preprocessing_material_filename").as_string();
configuration::set_attribute("/heightmap/splatting_diffuse_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_diffuse_texture_preprocessing_material_filename));
std::string splatting_normal_texture_preprocessing_material_filename = node.node().attribute("splatting_normal_texture_preprocessing_material_filename").as_string();
configuration::set_attribute("/heightmap/splatting_normal_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_normal_texture_preprocessing_material_filename));
}
void heightmap_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string heightmap_data_filename = json.get("heightmap_data_filename", "unknown").asString();
configuration::set_attribute("/heightmap/heightmap_data_filename", std::make_shared<configuration_attribute>(heightmap_data_filename));
i32 heightmap_chunk_size_x = json.get("heightmap_chunk_size_x", 0).asInt();
configuration::set_attribute("/heightmap/heightmap_chunk_size_x", std::make_shared<configuration_attribute>(heightmap_chunk_size_x));
i32 heightmap_chunk_size_y = json.get("heightmap_chunk_size_y", 0).asInt();
configuration::set_attribute("/heightmap/heightmap_chunk_size_y", std::make_shared<configuration_attribute>(heightmap_chunk_size_y));
std::string splatting_diffuse_texture_preprocessing_material_filename = json.get("splatting_diffuse_texture_preprocessing_material_filename", "unknown").asString();
configuration::set_attribute("/heightmap/splatting_diffuse_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_diffuse_texture_preprocessing_material_filename));
std::string splatting_normal_texture_preprocessing_material_filename = json.get("splatting_normal_texture_preprocessing_material_filename", "unknown").asString();
configuration::set_attribute("/heightmap/splatting_normal_texture_preprocessing_material_filename", std::make_shared<configuration_attribute>(splatting_normal_texture_preprocessing_material_filename));
}
}
