// autogenerated: do not add any changes
#include "animation_sequence_3d_configuration.h"
namespace gb
{
std::string animation_sequence_3d_configuration::get_animation_filename(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/animation_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_animation_filename(std::string animation_filename)
{
configuration::set_attribute("/animation_sequence_3d/animation_filename", std::make_shared<configuration_attribute>(animation_filename));
}
#endif
std::string animation_sequence_3d_configuration::get_animation_name(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/animation_name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_animation_name(std::string animation_name)
{
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
}
#endif
void animation_sequence_3d_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/animation_sequence_3d");
std::string animation_filename = node.node().attribute("animation_filename").as_string();
configuration::set_attribute("/animation_sequence_3d/animation_filename", std::make_shared<configuration_attribute>(animation_filename));
std::string animation_name = node.node().attribute("animation_name").as_string();
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
}
void animation_sequence_3d_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string animation_filename = json.get("animation_filename", "unknown").asString();
configuration::set_attribute("/animation_sequence_3d/animation_filename", std::make_shared<configuration_attribute>(animation_filename));
std::string animation_name = json.get("animation_name", "unknown").asString();
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
}
}
