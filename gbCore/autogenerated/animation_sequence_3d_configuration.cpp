// autogenerated: do not add any changes
#include "animation_sequence_3d_configuration.h"
namespace gb
{
std::string animation_sequence_3d_configuration::get_animation_filename(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_animation_filename(std::string filename)
{
configuration::set_attribute("/animation_sequence_3d/filename", std::make_shared<configuration_attribute>(filename));
}
#endif
std::string animation_sequence_3d_configuration::get_animation_name(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/animation_name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_animation_name(std::string animation_name)
{
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
}
#endif
i32 animation_sequence_3d_configuration::get_start_index(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/start_index");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_start_index(i32 start_index)
{
configuration::set_attribute("/animation_sequence_3d/start_index", std::make_shared<configuration_attribute>(start_index));
}
#endif
i32 animation_sequence_3d_configuration::get_end_index(void) const
{
const auto& iterator = m_attributes.find("/animation_sequence_3d/end_index");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void animation_sequence_3d_configuration::set_end_index(i32 end_index)
{
configuration::set_attribute("/animation_sequence_3d/end_index", std::make_shared<configuration_attribute>(end_index));
}
#endif
void animation_sequence_3d_configuration::serialize_xml(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/animation_sequence_3d").c_str());
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/animation_sequence_3d/filename", std::make_shared<configuration_attribute>(filename));
std::string animation_name = node.node().attribute("animation_name").as_string();
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
i32 start_index = node.node().attribute("start_index").as_int();
configuration::set_attribute("/animation_sequence_3d/start_index", std::make_shared<configuration_attribute>(start_index));
i32 end_index = node.node().attribute("end_index").as_int();
configuration::set_attribute("/animation_sequence_3d/end_index", std::make_shared<configuration_attribute>(end_index));
}
void animation_sequence_3d_configuration::serialize_json(Json::Value& json)
{
std::string filename = json.get("filename", "unknown").asString();
configuration::set_attribute("/animation_sequence_3d/filename", std::make_shared<configuration_attribute>(filename));
std::string animation_name = json.get("animation_name", "unknown").asString();
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
i32 start_index = json.get("start_index", 0).asInt();
configuration::set_attribute("/animation_sequence_3d/start_index", std::make_shared<configuration_attribute>(start_index));
i32 end_index = json.get("end_index", 0).asInt();
configuration::set_attribute("/animation_sequence_3d/end_index", std::make_shared<configuration_attribute>(end_index));
}
void animation_sequence_3d_configuration::serialize_xml(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string filename = node.node().attribute("filename").as_string();
configuration::set_attribute("/animation_sequence_3d/filename", std::make_shared<configuration_attribute>(filename));
std::string animation_name = node.node().attribute("animation_name").as_string();
configuration::set_attribute("/animation_sequence_3d/animation_name", std::make_shared<configuration_attribute>(animation_name));
i32 start_index = node.node().attribute("start_index").as_int();
configuration::set_attribute("/animation_sequence_3d/start_index", std::make_shared<configuration_attribute>(start_index));
i32 end_index = node.node().attribute("end_index").as_int();
configuration::set_attribute("/animation_sequence_3d/end_index", std::make_shared<configuration_attribute>(end_index));
}
}
