// autogenerated: do not add any changes
#include "font_configuration.h"
namespace gb
{
i32 font_configuration::get_size_width(void) const
{
const auto& iterator = m_attributes.find("/font/size_width");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void font_configuration::set_size_width(i32 size_width)
{
configuration::set_attribute("/font/size_width", std::make_shared<configuration_attribute>(size_width));
}
#endif
i32 font_configuration::get_size_height(void) const
{
const auto& iterator = m_attributes.find("/font/size_height");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void font_configuration::set_size_height(i32 size_height)
{
configuration::set_attribute("/font/size_height", std::make_shared<configuration_attribute>(size_height));
}
#endif
std::vector<std::shared_ptr<configuration>> font_configuration::get_glyphs_configurations(void) const
{
const auto& iterator = m_configurations.find("/font/glyphs/glyph");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void font_configuration::add_glyphs_configurations(const std::shared_ptr<gb::glyph_configuration>& glyph)
{
configuration::set_configuration("/font/glyphs/glyph", glyph);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void font_configuration::set_glyphs_configurations(const std::shared_ptr<gb::glyph_configuration>& glyph, i32 index)
{
configuration::set_configuration("/font/glyphs/glyph", glyph, index);
}
#endif
void font_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/font");
i32 size_width = node.node().attribute("size_width").as_int();
configuration::set_attribute("/font/size_width", std::make_shared<configuration_attribute>(size_width));
i32 size_height = node.node().attribute("size_height").as_int();
configuration::set_attribute("/font/size_height", std::make_shared<configuration_attribute>(size_height));
pugi::xpath_node_set glyph_nodes = document.select_nodes("/font/glyphs/glyph");
for (pugi::xpath_node_set::const_iterator iterator = glyph_nodes.begin(); iterator != glyph_nodes.end(); ++iterator)
{
std::shared_ptr<gb::glyph_configuration> glyph = std::make_shared<gb::glyph_configuration>();
pugi::xpath_node node = (*iterator);
glyph->serialize_xml(document, node);
configuration::set_configuration("/font/glyphs/glyph", glyph);
}
}
void font_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
i32 size_width = json.get("size_width", 0).asInt();
configuration::set_attribute("/font/size_width", std::make_shared<configuration_attribute>(size_width));
i32 size_height = json.get("size_height", 0).asInt();
configuration::set_attribute("/font/size_height", std::make_shared<configuration_attribute>(size_height));
Json::Value glyphs_json_array = json["glyphs"];
for (Json::ValueIterator iterator = glyphs_json_array.begin(); iterator != glyphs_json_array.end(); ++iterator)
{
std::shared_ptr<gb::glyph_configuration> glyph = std::make_shared<gb::glyph_configuration>();
Json::Value json_value = (*iterator);
glyph->serialize_json(json_value);
configuration::set_configuration("/font/glyphs/glyph", glyph);
}
}
}
