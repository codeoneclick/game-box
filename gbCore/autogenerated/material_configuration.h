// autogenerated: do not add any changes
#ifndef material_configuration_h
#define material_configuration_h
#include "configuration.h"
#include "shader_configuration.h"
#include "texture_configuration.h"
#include "blending_configuration.h"
namespace gb
{
class material_configuration : public configuration
{
public:
material_configuration(void) = default;
~material_configuration(void) = default;
std::string get_technique_name(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_technique_name(std::string technique_name);
#endif
i32 get_technique_pass(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_technique_pass(i32 technique_pass);
#endif
bool get_depth_test(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_depth_test(bool is_depth_test);
#endif
bool get_depth_mask(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_depth_mask(bool is_depth_mask);
#endif
bool get_color_mask_r(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_color_mask_r(bool is_color_mask_r);
#endif
bool get_color_mask_g(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_color_mask_g(bool is_color_mask_g);
#endif
bool get_color_mask_b(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_color_mask_b(bool is_color_mask_b);
#endif
bool get_color_mask_a(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_color_mask_a(bool is_color_mask_a);
#endif
bool get_culling(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_culling(bool is_cull_face);
#endif
ui32 get_culling_mode(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_culling_mode(ui32 cull_face_mode);
#endif
bool get_stencil_test(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_stencil_test(bool is_stencil_test);
#endif
ui32 get_stencil_function(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_stencil_function(ui32 stencil_function);
#endif
ui32 get_back_stencil_op_1(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_back_stencil_op_1(ui32 back_stencil_op_1);
#endif
ui32 get_back_stencil_op_2(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_back_stencil_op_2(ui32 back_stencil_op_2);
#endif
ui32 get_back_stencil_op_3(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_back_stencil_op_3(ui32 back_stencil_op_3);
#endif
ui32 get_front_stencil_op_1(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_front_stencil_op_1(ui32 front_stencil_op_1);
#endif
ui32 get_front_stencil_op_2(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_front_stencil_op_2(ui32 front_stencil_op_2);
#endif
ui32 get_front_stencil_op_3(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_front_stencil_op_3(ui32 front_stencil_op_3);
#endif
i32 get_stencil_mask_read(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_stencil_mask_read(i32 stencil_mask_read);
#endif
i32 get_stencil_mask_write(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_stencil_mask_write(i32 stencil_mask_write);
#endif
i32 get_stencil_ref_value(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_stencil_ref_value(i32 stencil_ref_value);
#endif
i32 get_z_order(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_z_order(i32 z_order);
#endif
bool get_debugging(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_debugging(bool is_debugging);
#endif
bool get_is_batching(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_is_batching(bool is_batching);
#endif
std::shared_ptr<shader_configuration> get_shader_configuration(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_shader_configuration(const std::shared_ptr<gb::shader_configuration>& shader);
#endif
std::vector<std::shared_ptr<configuration>> get_textures_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_textures_configurations(const std::shared_ptr<gb::texture_configuration>& texture);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_textures_configurations(const std::shared_ptr<gb::texture_configuration>& texture, i32 index);
#endif
std::vector<std::shared_ptr<configuration>> get_blendings_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_blendings_configurations(const std::shared_ptr<gb::blending_configuration>& blending);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_blendings_configurations(const std::shared_ptr<gb::blending_configuration>& blending, i32 index);
#endif
void serialize_xml(const std::string& filename);
void serialize_json(const std::string& filename);
};
};
#endif
