// autogenerated: do not add any changes
#include "attachment_configuration.h"
namespace gb
{
std::string attachment_configuration::get_name(void) const
{
const auto& iterator = m_attributes.find("/attachment/name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void attachment_configuration::set_name(std::string name)
{
configuration::set_attribute("/attachment/name", std::make_shared<configuration_attribute>(name));
}
#endif
ui32 attachment_configuration::get_pixel_format(void) const
{
const auto& iterator = m_attributes.find("/attachment/pixel_format");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void attachment_configuration::set_pixel_format(ui32 pixel_format)
{
configuration::set_attribute("/attachment/pixel_format", std::make_shared<configuration_attribute>(pixel_format));
}
#endif
void attachment_configuration::serialize_xml(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/attachment").c_str());
std::string name = node.node().attribute("name").as_string();
configuration::set_attribute("/attachment/name", std::make_shared<configuration_attribute>(name));
ui32 pixel_format = node.node().attribute("pixel_format").as_uint();
configuration::set_attribute("/attachment/pixel_format", std::make_shared<configuration_attribute>(pixel_format));
}
void attachment_configuration::serialize_json(Json::Value& json)
{
std::string name = json.get("name", "unknown").asString();
configuration::set_attribute("/attachment/name", std::make_shared<configuration_attribute>(name));
ui32 pixel_format = json.get("pixel_format", 0).asUInt();
configuration::set_attribute("/attachment/pixel_format", std::make_shared<configuration_attribute>(pixel_format));
}
void attachment_configuration::serialize_xml(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string name = node.node().attribute("name").as_string();
configuration::set_attribute("/attachment/name", std::make_shared<configuration_attribute>(name));
ui32 pixel_format = node.node().attribute("pixel_format").as_uint();
configuration::set_attribute("/attachment/pixel_format", std::make_shared<configuration_attribute>(pixel_format));
}
}
