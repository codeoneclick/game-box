// autogenerated: do not add any changes
#include "omni_deferred_light_source_3d_configuration.h"
namespace gb
{
f32 omni_deferred_light_source_3d_configuration::get_radius(void) const
{
const auto& iterator = m_attributes.find("/omni_deferred_light_source_3d/radius");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::set_radius(f32 radius)
{
configuration::set_attribute("/omni_deferred_light_source_3d/radius", std::make_shared<configuration_attribute>(radius));
}
#endif
f32 omni_deferred_light_source_3d_configuration::get_color_r(void) const
{
const auto& iterator = m_attributes.find("/omni_deferred_light_source_3d/color_r");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::set_color_r(f32 color_r)
{
configuration::set_attribute("/omni_deferred_light_source_3d/color_r", std::make_shared<configuration_attribute>(color_r));
}
#endif
f32 omni_deferred_light_source_3d_configuration::get_color_g(void) const
{
const auto& iterator = m_attributes.find("/omni_deferred_light_source_3d/color_g");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::set_color_g(f32 color_g)
{
configuration::set_attribute("/omni_deferred_light_source_3d/color_g", std::make_shared<configuration_attribute>(color_g));
}
#endif
f32 omni_deferred_light_source_3d_configuration::get_color_b(void) const
{
const auto& iterator = m_attributes.find("/omni_deferred_light_source_3d/color_b");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::set_color_b(f32 color_b)
{
configuration::set_attribute("/omni_deferred_light_source_3d/color_b", std::make_shared<configuration_attribute>(color_b));
}
#endif
std::vector<std::shared_ptr<configuration>> omni_deferred_light_source_3d_configuration::get_materials_configurations(void) const
{
const auto& iterator = m_configurations.find("/omni_deferred_light_source_3d/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/omni_deferred_light_source_3d/materials/material", material);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void omni_deferred_light_source_3d_configuration::set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index)
{
configuration::set_configuration("/omni_deferred_light_source_3d/materials/material", material, index);
}
#endif
void omni_deferred_light_source_3d_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/omni_deferred_light_source_3d");
f32 radius = node.node().attribute("radius").as_float();
configuration::set_attribute("/omni_deferred_light_source_3d/radius", std::make_shared<configuration_attribute>(radius));
f32 color_r = node.node().attribute("color_r").as_float();
configuration::set_attribute("/omni_deferred_light_source_3d/color_r", std::make_shared<configuration_attribute>(color_r));
f32 color_g = node.node().attribute("color_g").as_float();
configuration::set_attribute("/omni_deferred_light_source_3d/color_g", std::make_shared<configuration_attribute>(color_g));
f32 color_b = node.node().attribute("color_b").as_float();
configuration::set_attribute("/omni_deferred_light_source_3d/color_b", std::make_shared<configuration_attribute>(color_b));
pugi::xpath_node_set material_nodes = document.select_nodes("/omni_deferred_light_source_3d/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
std::string external_filename =(*iterator).node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/omni_deferred_light_source_3d/materials/material", material);
}
}
void omni_deferred_light_source_3d_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
f32 radius = json.get("radius", 0.f).asFloat();
configuration::set_attribute("/omni_deferred_light_source_3d/radius", std::make_shared<configuration_attribute>(radius));
f32 color_r = json.get("color_r", 0.f).asFloat();
configuration::set_attribute("/omni_deferred_light_source_3d/color_r", std::make_shared<configuration_attribute>(color_r));
f32 color_g = json.get("color_g", 0.f).asFloat();
configuration::set_attribute("/omni_deferred_light_source_3d/color_g", std::make_shared<configuration_attribute>(color_g));
f32 color_b = json.get("color_b", 0.f).asFloat();
configuration::set_attribute("/omni_deferred_light_source_3d/color_b", std::make_shared<configuration_attribute>(color_b));
Json::Value materials_json_array = json["materials"];
for (Json::ValueIterator iterator = materials_json_array.begin(); iterator != materials_json_array.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
Json::Value json_value = (*iterator);
std::string external_filename =json_value.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/omni_deferred_light_source_3d/materials/material", material);
}
}
}
