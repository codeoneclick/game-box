// autogenerated: do not add any changes
#ifndef ws_technique_configuration_h
#define ws_technique_configuration_h
#include "configuration.h"
#include "attachment_configuration.h"
namespace gb
{
class ws_technique_configuration : public configuration
{
public:
ws_technique_configuration(void) = default;
~ws_technique_configuration(void) = default;
std::string get_guid(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_guid(std::string guid);
#endif
bool get_is_depth_compare_mode_enabled(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_is_depth_compare_mode_enabled(bool is_depth_compare_mode_enabled);
#endif
ui32 get_num_passes(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_num_passes(ui32 num_passes);
#endif
ui32 get_order(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_order(ui32 order);
#endif
ui32 get_frame_width(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_frame_width(ui32 frame_width);
#endif
ui32 get_frame_height(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_frame_height(ui32 frame_height);
#endif
std::vector<std::shared_ptr<configuration>> get_attachments_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_attachments_configurations(const std::shared_ptr<gb::attachment_configuration>& attachment);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_attachments_configurations(const std::shared_ptr<gb::attachment_configuration>& attachment, i32 index);
#endif
void serialize_xml(const std::string& filename);
void serialize_json(const std::string& filename);
};
};
#endif
