// autogenerated: do not add any changes
#ifndef ws_technique_configuration_h
#define ws_technique_configuration_h
#include "configuration.h"
namespace gb
{
class ws_technique_configuration : public configuration
{
public:
ws_technique_configuration(void) = default;
~ws_technique_configuration(void) = default;
std::string get_guid(void) const;
#if defined(__EDITOR__)
void set_guid(std::string guid);
#endif
bool get_is_depth_compare_mode_enabled(void) const;
#if defined(__EDITOR__)
void set_is_depth_compare_mode_enabled(bool is_depth_compare_mode_enabled);
#endif
ui32 get_num_passes(void) const;
#if defined(__EDITOR__)
void set_num_passes(ui32 num_passes);
#endif
ui32 get_index(void) const;
#if defined(__EDITOR__)
void set_index(ui32 index);
#endif
ui32 get_screen_width(void) const;
#if defined(__EDITOR__)
void set_screen_width(ui32 screen_width);
#endif
ui32 get_screen_height(void) const;
#if defined(__EDITOR__)
void set_screen_height(ui32 screen_height);
#endif
f32 get_clear_color_r(void) const;
#if defined(__EDITOR__)
void set_clear_color_r(f32 clear_color_r);
#endif
f32 get_clear_color_g(void) const;
#if defined(__EDITOR__)
void set_clear_color_g(f32 clear_color_g);
#endif
f32 get_clear_color_b(void) const;
#if defined(__EDITOR__)
void set_clear_color_b(f32 clear_color_b);
#endif
f32 get_clear_color_a(void) const;
#if defined(__EDITOR__)
void set_clear_color_a(f32 clear_color_a);
#endif
void serialize(const std::string& filename);
#if defined(__EDITOR__)
void deserialize(const std::string& filename);
#endif
};
};
#endif
