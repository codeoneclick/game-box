// autogenerated: do not add any changes
#include "trail_configuration.h"
namespace gb
{
ui32 trail_configuration::get_segments(void) const
{
const auto& iterator = m_attributes.find("/trail/segments");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void trail_configuration::set_segments(ui32 segments)
{
configuration::set_attribute("/trail/segments", std::make_shared<configuration_attribute>(segments));
}
#endif
f32 trail_configuration::get_segment_length(void) const
{
const auto& iterator = m_attributes.find("/trail/segment_length");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void trail_configuration::set_segment_length(f32 segment_length)
{
configuration::set_attribute("/trail/segment_length", std::make_shared<configuration_attribute>(segment_length));
}
#endif
f32 trail_configuration::get_width(void) const
{
const auto& iterator = m_attributes.find("/trail/width");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void trail_configuration::set_width(f32 width)
{
configuration::set_attribute("/trail/width", std::make_shared<configuration_attribute>(width));
}
#endif
std::vector<std::shared_ptr<configuration>> trail_configuration::get_materials_configurations(void) const
{
const auto& iterator = m_configurations.find("/trail/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void trail_configuration::add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/trail/materials/material", material);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void trail_configuration::set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index)
{
configuration::set_configuration("/trail/materials/material", material, index);
}
#endif
void trail_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/trail");
ui32 segments = node.node().attribute("segments").as_uint();
configuration::set_attribute("/trail/segments", std::make_shared<configuration_attribute>(segments));
f32 segment_length = node.node().attribute("segment_length").as_float();
configuration::set_attribute("/trail/segment_length", std::make_shared<configuration_attribute>(segment_length));
f32 width = node.node().attribute("width").as_float();
configuration::set_attribute("/trail/width", std::make_shared<configuration_attribute>(width));
pugi::xpath_node_set material_nodes = document.select_nodes("/trail/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
std::string external_filename =(*iterator).node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/trail/materials/material", material);
}
}
void trail_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
ui32 segments = json.get("segments", 0).asUInt();
configuration::set_attribute("/trail/segments", std::make_shared<configuration_attribute>(segments));
f32 segment_length = json.get("segment_length", 0.f).asFloat();
configuration::set_attribute("/trail/segment_length", std::make_shared<configuration_attribute>(segment_length));
f32 width = json.get("width", 0.f).asFloat();
configuration::set_attribute("/trail/width", std::make_shared<configuration_attribute>(width));
Json::Value materials_json_array = json["materials"];
for (Json::ValueIterator iterator = materials_json_array.begin(); iterator != materials_json_array.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
Json::Value json_value = (*iterator);
std::string external_filename =json_value.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/trail/materials/material", material);
}
}
}
