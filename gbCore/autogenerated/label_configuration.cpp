// autogenerated: do not add any changes
#include "label_configuration.h"
namespace gb
{
std::vector<std::shared_ptr<configuration>> label_configuration::get_materials_configurations(void) const
{
const auto& iterator = m_configurations.find("/label/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void label_configuration::add_materials_configurations(const std::shared_ptr<gb::material_configuration>& material)
{
configuration::set_configuration("/label/materials/material", material);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void label_configuration::set_materials_configurations(const std::shared_ptr<gb::material_configuration>& material, i32 index)
{
configuration::set_configuration("/label/materials/material", material, index);
}
#endif
std::shared_ptr<gb::font_configuration> label_configuration::get_font_configuration(void) const
{
const auto& iterator = m_configurations.find("/label/font/font");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<gb::font_configuration>(iterator->second.at(0));
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void label_configuration::set_font_configuration(const std::shared_ptr<gb::font_configuration>& font)
{
configuration::set_configuration("/label/font/font", font, 0);
}
#endif
void label_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/label");
pugi::xpath_node_set material_nodes = document.select_nodes("/label/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
std::string external_filename =(*iterator).node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/label/materials/material", material);
}
std::shared_ptr<gb::font_configuration> font = std::make_shared<gb::font_configuration>();
pugi::xpath_node font_node = document.select_single_node("/label/font/font");
std::string external_filename =font_node.node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
font->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
font->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/label/font/font", font);
}
void label_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
Json::Value materials_json_array = json["materials"];
for (Json::ValueIterator iterator = materials_json_array.begin(); iterator != materials_json_array.end(); ++iterator)
{
std::shared_ptr<gb::material_configuration> material = std::make_shared<gb::material_configuration>();
Json::Value json_value = (*iterator);
std::string external_filename =json_value.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
material->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
material->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/label/materials/material", material);
}
std::shared_ptr<gb::font_configuration> font = std::make_shared<gb::font_configuration>();
Json::Value font_json = json["font"];
std::string external_filename =font_json.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
font->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
font->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/label/font/font", font);
}
}
