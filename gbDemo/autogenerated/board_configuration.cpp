// autogenerated: do not add any changes
#include "board_configuration.h"
namespace gb
{
std::string board_configuration::get_cell_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/board/cell_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_cell_configuration_filename(std::string cell_configuration_filename)
{
configuration::set_attribute("/board/cell_configuration_filename", std::make_shared<configuration_attribute>(cell_configuration_filename));
}
#endif
std::string board_configuration::get_element_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/board/element_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_element_configuration_filename(std::string element_configuration_filename)
{
configuration::set_attribute("/board/element_configuration_filename", std::make_shared<configuration_attribute>(element_configuration_filename));
}
#endif
i32 board_configuration::get_cols(void) const
{
const auto& iterator = m_attributes.find("/board/cols");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_cols(i32 cols)
{
configuration::set_attribute("/board/cols", std::make_shared<configuration_attribute>(cols));
}
#endif
i32 board_configuration::get_rows(void) const
{
const auto& iterator = m_attributes.find("/board/rows");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_rows(i32 rows)
{
configuration::set_attribute("/board/rows", std::make_shared<configuration_attribute>(rows));
}
#endif
bool board_configuration::get_red(void) const
{
const auto& iterator = m_attributes.find("/board/red");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_red(bool red)
{
configuration::set_attribute("/board/red", std::make_shared<configuration_attribute>(red));
}
#endif
bool board_configuration::get_green(void) const
{
const auto& iterator = m_attributes.find("/board/green");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_green(bool green)
{
configuration::set_attribute("/board/green", std::make_shared<configuration_attribute>(green));
}
#endif
bool board_configuration::get_blue(void) const
{
const auto& iterator = m_attributes.find("/board/blue");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_blue(bool blue)
{
configuration::set_attribute("/board/blue", std::make_shared<configuration_attribute>(blue));
}
#endif
bool board_configuration::get_yellow(void) const
{
const auto& iterator = m_attributes.find("/board/yellow");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void board_configuration::set_yellow(bool yellow)
{
configuration::set_attribute("/board/yellow", std::make_shared<configuration_attribute>(yellow));
}
#endif
void board_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/board");
std::string cell_configuration_filename = node.node().attribute("cell_configuration_filename").as_string();
configuration::set_attribute("/board/cell_configuration_filename", std::make_shared<configuration_attribute>(cell_configuration_filename));
std::string element_configuration_filename = node.node().attribute("element_configuration_filename").as_string();
configuration::set_attribute("/board/element_configuration_filename", std::make_shared<configuration_attribute>(element_configuration_filename));
i32 cols = node.node().attribute("cols").as_int();
configuration::set_attribute("/board/cols", std::make_shared<configuration_attribute>(cols));
i32 rows = node.node().attribute("rows").as_int();
configuration::set_attribute("/board/rows", std::make_shared<configuration_attribute>(rows));
bool red = node.node().attribute("red").as_bool();
configuration::set_attribute("/board/red", std::make_shared<configuration_attribute>(red));
bool green = node.node().attribute("green").as_bool();
configuration::set_attribute("/board/green", std::make_shared<configuration_attribute>(green));
bool blue = node.node().attribute("blue").as_bool();
configuration::set_attribute("/board/blue", std::make_shared<configuration_attribute>(blue));
bool yellow = node.node().attribute("yellow").as_bool();
configuration::set_attribute("/board/yellow", std::make_shared<configuration_attribute>(yellow));
}
void board_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string cell_configuration_filename = json.get("cell_configuration_filename", "unknown").asString();
configuration::set_attribute("/board/cell_configuration_filename", std::make_shared<configuration_attribute>(cell_configuration_filename));
std::string element_configuration_filename = json.get("element_configuration_filename", "unknown").asString();
configuration::set_attribute("/board/element_configuration_filename", std::make_shared<configuration_attribute>(element_configuration_filename));
i32 cols = json.get("cols", 0).asInt();
configuration::set_attribute("/board/cols", std::make_shared<configuration_attribute>(cols));
i32 rows = json.get("rows", 0).asInt();
configuration::set_attribute("/board/rows", std::make_shared<configuration_attribute>(rows));
bool red = json.get("red", false).asBool();
configuration::set_attribute("/board/red", std::make_shared<configuration_attribute>(red));
bool green = json.get("green", false).asBool();
configuration::set_attribute("/board/green", std::make_shared<configuration_attribute>(green));
bool blue = json.get("blue", false).asBool();
configuration::set_attribute("/board/blue", std::make_shared<configuration_attribute>(blue));
bool yellow = json.get("yellow", false).asBool();
configuration::set_attribute("/board/yellow", std::make_shared<configuration_attribute>(yellow));
}
}
