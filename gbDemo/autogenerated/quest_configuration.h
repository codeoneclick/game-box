// autogenerated: do not add any changes
#ifndef quest_configuration_h
#define quest_configuration_h
#include "configuration.h"
#include "quest_task_configuration.h"
#include "quest_dependency_configuration.h"
namespace gb
{
class quest_configuration : public configuration
{
public:
quest_configuration(void) = default;
~quest_configuration(void) = default;
i32 get_id(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_id(i32 id);
#endif
i32 get_level_requirements(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_level_requirements(i32 level_requirements);
#endif
std::vector<std::shared_ptr<configuration>> get_quest_task_configurations(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_quest_task_configurations(const std::shared_ptr<gb::quest_task_configuration>& task);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_quest_task_configurations(const std::shared_ptr<gb::quest_task_configuration>& task, i32 index);
#endif
std::vector<std::shared_ptr<configuration>> get_quest_dependencies(void) const;
#if defined(__IS_CONFIGURATION_MUTABLE__)
void add_quest_dependencies(const std::shared_ptr<gb::quest_dependency_configuration>& dependency);
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void set_quest_dependencies(const std::shared_ptr<gb::quest_dependency_configuration>& dependency, i32 index);
#endif
void serialize_xml(const std::string& filename);
void serialize_json(const std::string& filename);
};
};
#endif
