// autogenerated: do not add any changes
#include "mob_configuration.h"
namespace gb
{
std::string mob_configuration::get_character_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/mob/character_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void mob_configuration::set_character_configuration_filename(std::string character_configuration_filename)
{
configuration::set_attribute("/mob/character_configuration_filename", std::make_shared<configuration_attribute>(character_configuration_filename));
}
#endif
f32 mob_configuration::get_chase_start_distance(void) const
{
const auto& iterator = m_attributes.find("/mob/chase_start_distance");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void mob_configuration::set_chase_start_distance(f32 chase_start_distance)
{
configuration::set_attribute("/mob/chase_start_distance", std::make_shared<configuration_attribute>(chase_start_distance));
}
#endif
f32 mob_configuration::get_chase_end_distance(void) const
{
const auto& iterator = m_attributes.find("/mob/chase_end_distance");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void mob_configuration::set_chase_end_distance(f32 chase_end_distance)
{
configuration::set_attribute("/mob/chase_end_distance", std::make_shared<configuration_attribute>(chase_end_distance));
}
#endif
void mob_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/mob");
std::string character_configuration_filename = node.node().attribute("character_configuration_filename").as_string();
configuration::set_attribute("/mob/character_configuration_filename", std::make_shared<configuration_attribute>(character_configuration_filename));
f32 chase_start_distance = node.node().attribute("chase_start_distance").as_float();
configuration::set_attribute("/mob/chase_start_distance", std::make_shared<configuration_attribute>(chase_start_distance));
f32 chase_end_distance = node.node().attribute("chase_end_distance").as_float();
configuration::set_attribute("/mob/chase_end_distance", std::make_shared<configuration_attribute>(chase_end_distance));
}
void mob_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string character_configuration_filename = json.get("character_configuration_filename", "unknown").asString();
configuration::set_attribute("/mob/character_configuration_filename", std::make_shared<configuration_attribute>(character_configuration_filename));
f32 chase_start_distance = json.get("chase_start_distance", 0.f).asFloat();
configuration::set_attribute("/mob/chase_start_distance", std::make_shared<configuration_attribute>(chase_start_distance));
f32 chase_end_distance = json.get("chase_end_distance", 0.f).asFloat();
configuration::set_attribute("/mob/chase_end_distance", std::make_shared<configuration_attribute>(chase_end_distance));
}
}
