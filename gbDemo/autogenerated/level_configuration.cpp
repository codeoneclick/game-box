// autogenerated: do not add any changes
#include "level_configuration.h"
namespace gb
{
std::string level_configuration::get_visual_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/level/visual_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void level_configuration::set_visual_configuration_filename(std::string visual_configuration_filename)
{
configuration::set_attribute("/level/visual_configuration_filename", std::make_shared<configuration_attribute>(visual_configuration_filename));
}
#endif
i32 level_configuration::get_level_width(void) const
{
const auto& iterator = m_attributes.find("/level/level_width");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void level_configuration::set_level_width(i32 level_width)
{
configuration::set_attribute("/level/level_width", std::make_shared<configuration_attribute>(level_width));
}
#endif
i32 level_configuration::get_level_height(void) const
{
const auto& iterator = m_attributes.find("/level/level_height");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void level_configuration::set_level_height(i32 level_height)
{
configuration::set_attribute("/level/level_height", std::make_shared<configuration_attribute>(level_height));
}
#endif
i32 level_configuration::get_level_cell_width(void) const
{
const auto& iterator = m_attributes.find("/level/level_cell_width");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void level_configuration::set_level_cell_width(i32 level_cell_width)
{
configuration::set_attribute("/level/level_cell_width", std::make_shared<configuration_attribute>(level_cell_width));
}
#endif
i32 level_configuration::get_level_cell_height(void) const
{
const auto& iterator = m_attributes.find("/level/level_cell_height");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void level_configuration::set_level_cell_height(i32 level_cell_height)
{
configuration::set_attribute("/level/level_cell_height", std::make_shared<configuration_attribute>(level_cell_height));
}
#endif
void level_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/level");
std::string visual_configuration_filename = node.node().attribute("visual_configuration_filename").as_string();
configuration::set_attribute("/level/visual_configuration_filename", std::make_shared<configuration_attribute>(visual_configuration_filename));
i32 level_width = node.node().attribute("level_width").as_int();
configuration::set_attribute("/level/level_width", std::make_shared<configuration_attribute>(level_width));
i32 level_height = node.node().attribute("level_height").as_int();
configuration::set_attribute("/level/level_height", std::make_shared<configuration_attribute>(level_height));
i32 level_cell_width = node.node().attribute("level_cell_width").as_int();
configuration::set_attribute("/level/level_cell_width", std::make_shared<configuration_attribute>(level_cell_width));
i32 level_cell_height = node.node().attribute("level_cell_height").as_int();
configuration::set_attribute("/level/level_cell_height", std::make_shared<configuration_attribute>(level_cell_height));
}
void level_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string visual_configuration_filename = json.get("visual_configuration_filename", "unknown").asString();
configuration::set_attribute("/level/visual_configuration_filename", std::make_shared<configuration_attribute>(visual_configuration_filename));
i32 level_width = json.get("level_width", 0).asInt();
configuration::set_attribute("/level/level_width", std::make_shared<configuration_attribute>(level_width));
i32 level_height = json.get("level_height", 0).asInt();
configuration::set_attribute("/level/level_height", std::make_shared<configuration_attribute>(level_height));
i32 level_cell_width = json.get("level_cell_width", 0).asInt();
configuration::set_attribute("/level/level_cell_width", std::make_shared<configuration_attribute>(level_cell_width));
i32 level_cell_height = json.get("level_cell_height", 0).asInt();
configuration::set_attribute("/level/level_cell_height", std::make_shared<configuration_attribute>(level_cell_height));
}
}
