// autogenerated: do not add any changes
#include "levels_set_configuration.h"
namespace gb
{
std::vector<std::shared_ptr<configuration>> levels_set_configuration::get_levels_configuration(void) const
{
const auto& iterator = m_configurations.find("/levels_set/levels/level");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void levels_set_configuration::add_levels_configuration(const std::shared_ptr<gb::level_configuration>& level)
{
configuration::set_configuration("/levels_set/levels/level", level);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void levels_set_configuration::set_levels_configuration(const std::shared_ptr<gb::level_configuration>& level, i32 index)
{
configuration::set_configuration("/levels_set/levels/level", level, index);
}
#endif
void levels_set_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/levels_set");
pugi::xpath_node_set level_nodes = document.select_nodes("/levels_set/levels/level");
for (pugi::xpath_node_set::const_iterator iterator = level_nodes.begin(); iterator != level_nodes.end(); ++iterator)
{
std::shared_ptr<gb::level_configuration> level = std::make_shared<gb::level_configuration>();
std::string external_filename =(*iterator).node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
level->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
level->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/levels_set/levels/level", level);
}
}
void levels_set_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
Json::Value levels_json_array = json["levels"];
for (Json::ValueIterator iterator = levels_json_array.begin(); iterator != levels_json_array.end(); ++iterator)
{
std::shared_ptr<gb::level_configuration> level = std::make_shared<gb::level_configuration>();
Json::Value json_value = (*iterator);
std::string external_filename =json_value.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
level->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
level->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/levels_set/levels/level", level);
}
}
}
