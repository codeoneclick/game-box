// autogenerated: do not add any changes
#include "quest_configuration.h"
namespace gb
{
i32 quest_configuration::get_id(void) const
{
const auto& iterator = m_attributes.find("/quest/id");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::set_id(i32 id)
{
configuration::set_attribute("/quest/id", std::make_shared<configuration_attribute>(id));
}
#endif
i32 quest_configuration::get_level_requirements(void) const
{
const auto& iterator = m_attributes.find("/quest/level_requirements");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::set_level_requirements(i32 level_requirements)
{
configuration::set_attribute("/quest/level_requirements", std::make_shared<configuration_attribute>(level_requirements));
}
#endif
std::vector<std::shared_ptr<configuration>> quest_configuration::get_quest_task_configurations(void) const
{
const auto& iterator = m_configurations.find("/quest/tasks/task");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::add_quest_task_configurations(const std::shared_ptr<gb::quest_task_configuration>& task)
{
configuration::set_configuration("/quest/tasks/task", task);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::set_quest_task_configurations(const std::shared_ptr<gb::quest_task_configuration>& task, i32 index)
{
configuration::set_configuration("/quest/tasks/task", task, index);
}
#endif
std::vector<std::shared_ptr<configuration>> quest_configuration::get_quest_dependencies(void) const
{
const auto& iterator = m_configurations.find("/quest/dependencies/dependency");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<configuration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::add_quest_dependencies(const std::shared_ptr<gb::quest_dependency_configuration>& dependency)
{
configuration::set_configuration("/quest/dependencies/dependency", dependency);
}
#endif
#if defined(__IS_CONFIGURATION_MUTABLE__)
void quest_configuration::set_quest_dependencies(const std::shared_ptr<gb::quest_dependency_configuration>& dependency, i32 index)
{
configuration::set_configuration("/quest/dependencies/dependency", dependency, index);
}
#endif
void quest_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/quest");
i32 id = node.node().attribute("id").as_int();
configuration::set_attribute("/quest/id", std::make_shared<configuration_attribute>(id));
i32 level_requirements = node.node().attribute("level_requirements").as_int();
configuration::set_attribute("/quest/level_requirements", std::make_shared<configuration_attribute>(level_requirements));
pugi::xpath_node_set task_nodes = document.select_nodes("/quest/tasks/task");
for (pugi::xpath_node_set::const_iterator iterator = task_nodes.begin(); iterator != task_nodes.end(); ++iterator)
{
std::shared_ptr<gb::quest_task_configuration> task = std::make_shared<gb::quest_task_configuration>();
std::string external_filename =(*iterator).node().attribute("filename").as_string();
if(external_filename.find(".xml") != std::string::npos)
{
task->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
task->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/quest/tasks/task", task);
}
pugi::xpath_node_set dependency_nodes = document.select_nodes("/quest/dependencies/dependency");
for (pugi::xpath_node_set::const_iterator iterator = dependency_nodes.begin(); iterator != dependency_nodes.end(); ++iterator)
{
std::shared_ptr<gb::quest_dependency_configuration> dependency = std::make_shared<gb::quest_dependency_configuration>();
pugi::xpath_node node = (*iterator);
dependency->serialize_xml(document, node);
configuration::set_configuration("/quest/dependencies/dependency", dependency);
}
}
void quest_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
i32 id = json.get("id", 0).asInt();
configuration::set_attribute("/quest/id", std::make_shared<configuration_attribute>(id));
i32 level_requirements = json.get("level_requirements", 0).asInt();
configuration::set_attribute("/quest/level_requirements", std::make_shared<configuration_attribute>(level_requirements));
Json::Value tasks_json_array = json["tasks"];
for (Json::ValueIterator iterator = tasks_json_array.begin(); iterator != tasks_json_array.end(); ++iterator)
{
std::shared_ptr<gb::quest_task_configuration> task = std::make_shared<gb::quest_task_configuration>();
Json::Value json_value = (*iterator);
std::string external_filename =json_value.get("filename", "unknown").asString();
if(external_filename.find(".xml") != std::string::npos)
{
task->serialize_xml(external_filename);
}
else if(external_filename.find(".json") != std::string::npos)
{
task->serialize_json(external_filename);
}
else
{
assert(false);
}
configuration::set_configuration("/quest/tasks/task", task);
}
Json::Value dependencys_json_array = json["dependencies"];
for (Json::ValueIterator iterator = dependencys_json_array.begin(); iterator != dependencys_json_array.end(); ++iterator)
{
std::shared_ptr<gb::quest_dependency_configuration> dependency = std::make_shared<gb::quest_dependency_configuration>();
Json::Value json_value = (*iterator);
dependency->serialize_json(json_value);
configuration::set_configuration("/quest/dependencies/dependency", dependency);
}
}
}
