// autogenerated: do not add any changes
#include "car_configuration.h"
namespace gb
{
std::string car_configuration::get_main_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/car/main_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_main_3d_configuration_filename(std::string main_3d_configuration_filename)
{
configuration::set_attribute("/car/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
}
#endif
std::string car_configuration::get_wheel_l_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/car/wheel_l_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_wheel_l_3d_configuration_filename(std::string wheel_l_3d_configuration_filename)
{
configuration::set_attribute("/car/wheel_l_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_l_3d_configuration_filename));
}
#endif
std::string car_configuration::get_wheel_r_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/car/wheel_r_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_wheel_r_3d_configuration_filename(std::string wheel_r_3d_configuration_filename)
{
configuration::set_attribute("/car/wheel_r_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_r_3d_configuration_filename));
}
#endif
std::string car_configuration::get_skin_1_filename(void) const
{
const auto& iterator = m_attributes.find("/car/skin_1_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_skin_1_filename(std::string skin_1_filename)
{
configuration::set_attribute("/car/skin_1_filename", std::make_shared<configuration_attribute>(skin_1_filename));
}
#endif
std::string car_configuration::get_skin_2_filename(void) const
{
const auto& iterator = m_attributes.find("/car/skin_2_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_skin_2_filename(std::string skin_2_filename)
{
configuration::set_attribute("/car/skin_2_filename", std::make_shared<configuration_attribute>(skin_2_filename));
}
#endif
std::string car_configuration::get_skin_3_filename(void) const
{
const auto& iterator = m_attributes.find("/car/skin_3_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_skin_3_filename(std::string skin_3_filename)
{
configuration::set_attribute("/car/skin_3_filename", std::make_shared<configuration_attribute>(skin_3_filename));
}
#endif
f32 car_configuration::get_fl_wheel_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/fl_wheel_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_wheel_offset_x(f32 fl_wheel_offset_x)
{
configuration::set_attribute("/car/fl_wheel_offset_x", std::make_shared<configuration_attribute>(fl_wheel_offset_x));
}
#endif
f32 car_configuration::get_fl_wheel_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/fl_wheel_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_wheel_offset_y(f32 fl_wheel_offset_y)
{
configuration::set_attribute("/car/fl_wheel_offset_y", std::make_shared<configuration_attribute>(fl_wheel_offset_y));
}
#endif
f32 car_configuration::get_fl_wheel_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/fl_wheel_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_wheel_offset_z(f32 fl_wheel_offset_z)
{
configuration::set_attribute("/car/fl_wheel_offset_z", std::make_shared<configuration_attribute>(fl_wheel_offset_z));
}
#endif
f32 car_configuration::get_fr_wheel_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/fr_wheel_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_wheel_offset_x(f32 fr_wheel_offset_x)
{
configuration::set_attribute("/car/fr_wheel_offset_x", std::make_shared<configuration_attribute>(fr_wheel_offset_x));
}
#endif
f32 car_configuration::get_fr_wheel_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/fr_wheel_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_wheel_offset_y(f32 fr_wheel_offset_y)
{
configuration::set_attribute("/car/fr_wheel_offset_y", std::make_shared<configuration_attribute>(fr_wheel_offset_y));
}
#endif
f32 car_configuration::get_fr_wheel_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/fr_wheel_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_wheel_offset_z(f32 fr_wheel_offset_z)
{
configuration::set_attribute("/car/fr_wheel_offset_z", std::make_shared<configuration_attribute>(fr_wheel_offset_z));
}
#endif
f32 car_configuration::get_rl_wheel_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/rl_wheel_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_wheel_offset_x(f32 rl_wheel_offset_x)
{
configuration::set_attribute("/car/rl_wheel_offset_x", std::make_shared<configuration_attribute>(rl_wheel_offset_x));
}
#endif
f32 car_configuration::get_rl_wheel_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/rl_wheel_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_wheel_offset_y(f32 rl_wheel_offset_y)
{
configuration::set_attribute("/car/rl_wheel_offset_y", std::make_shared<configuration_attribute>(rl_wheel_offset_y));
}
#endif
f32 car_configuration::get_rl_wheel_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/rl_wheel_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_wheel_offset_z(f32 rl_wheel_offset_z)
{
configuration::set_attribute("/car/rl_wheel_offset_z", std::make_shared<configuration_attribute>(rl_wheel_offset_z));
}
#endif
f32 car_configuration::get_rr_wheel_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/rr_wheel_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_wheel_offset_x(f32 rr_wheel_offset_x)
{
configuration::set_attribute("/car/rr_wheel_offset_x", std::make_shared<configuration_attribute>(rr_wheel_offset_x));
}
#endif
f32 car_configuration::get_rr_wheel_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/rr_wheel_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_wheel_offset_y(f32 rr_wheel_offset_y)
{
configuration::set_attribute("/car/rr_wheel_offset_y", std::make_shared<configuration_attribute>(rr_wheel_offset_y));
}
#endif
f32 car_configuration::get_rr_wheel_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/rr_wheel_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_wheel_offset_z(f32 rr_wheel_offset_z)
{
configuration::set_attribute("/car/rr_wheel_offset_z", std::make_shared<configuration_attribute>(rr_wheel_offset_z));
}
#endif
f32 car_configuration::get_fl_light_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/fl_light_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_light_offset_x(f32 fl_light_offset_x)
{
configuration::set_attribute("/car/fl_light_offset_x", std::make_shared<configuration_attribute>(fl_light_offset_x));
}
#endif
f32 car_configuration::get_fl_light_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/fl_light_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_light_offset_y(f32 fl_light_offset_y)
{
configuration::set_attribute("/car/fl_light_offset_y", std::make_shared<configuration_attribute>(fl_light_offset_y));
}
#endif
f32 car_configuration::get_fl_light_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/fl_light_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fl_light_offset_z(f32 fl_light_offset_z)
{
configuration::set_attribute("/car/fl_light_offset_z", std::make_shared<configuration_attribute>(fl_light_offset_z));
}
#endif
f32 car_configuration::get_fr_light_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/fr_light_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_light_offset_x(f32 fr_light_offset_x)
{
configuration::set_attribute("/car/fr_light_offset_x", std::make_shared<configuration_attribute>(fr_light_offset_x));
}
#endif
f32 car_configuration::get_fr_light_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/fr_light_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_light_offset_y(f32 fr_light_offset_y)
{
configuration::set_attribute("/car/fr_light_offset_y", std::make_shared<configuration_attribute>(fr_light_offset_y));
}
#endif
f32 car_configuration::get_fr_light_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/fr_light_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_fr_light_offset_z(f32 fr_light_offset_z)
{
configuration::set_attribute("/car/fr_light_offset_z", std::make_shared<configuration_attribute>(fr_light_offset_z));
}
#endif
f32 car_configuration::get_rl_light_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/rl_light_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_light_offset_x(f32 rl_light_offset_x)
{
configuration::set_attribute("/car/rl_light_offset_x", std::make_shared<configuration_attribute>(rl_light_offset_x));
}
#endif
f32 car_configuration::get_rl_light_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/rl_light_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_light_offset_y(f32 rl_light_offset_y)
{
configuration::set_attribute("/car/rl_light_offset_y", std::make_shared<configuration_attribute>(rl_light_offset_y));
}
#endif
f32 car_configuration::get_rl_light_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/rl_light_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rl_light_offset_z(f32 rl_light_offset_z)
{
configuration::set_attribute("/car/rl_light_offset_z", std::make_shared<configuration_attribute>(rl_light_offset_z));
}
#endif
f32 car_configuration::get_rr_light_offset_x(void) const
{
const auto& iterator = m_attributes.find("/car/rr_light_offset_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_light_offset_x(f32 rr_light_offset_x)
{
configuration::set_attribute("/car/rr_light_offset_x", std::make_shared<configuration_attribute>(rr_light_offset_x));
}
#endif
f32 car_configuration::get_rr_light_offset_y(void) const
{
const auto& iterator = m_attributes.find("/car/rr_light_offset_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_light_offset_y(f32 rr_light_offset_y)
{
configuration::set_attribute("/car/rr_light_offset_y", std::make_shared<configuration_attribute>(rr_light_offset_y));
}
#endif
f32 car_configuration::get_rr_light_offset_z(void) const
{
const auto& iterator = m_attributes.find("/car/rr_light_offset_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_configuration::set_rr_light_offset_z(f32 rr_light_offset_z)
{
configuration::set_attribute("/car/rr_light_offset_z", std::make_shared<configuration_attribute>(rr_light_offset_z));
}
#endif
void car_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/car");
std::string main_3d_configuration_filename = node.node().attribute("main_3d_configuration_filename").as_string();
configuration::set_attribute("/car/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
std::string wheel_l_3d_configuration_filename = node.node().attribute("wheel_l_3d_configuration_filename").as_string();
configuration::set_attribute("/car/wheel_l_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_l_3d_configuration_filename));
std::string wheel_r_3d_configuration_filename = node.node().attribute("wheel_r_3d_configuration_filename").as_string();
configuration::set_attribute("/car/wheel_r_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_r_3d_configuration_filename));
std::string skin_1_filename = node.node().attribute("skin_1_filename").as_string();
configuration::set_attribute("/car/skin_1_filename", std::make_shared<configuration_attribute>(skin_1_filename));
std::string skin_2_filename = node.node().attribute("skin_2_filename").as_string();
configuration::set_attribute("/car/skin_2_filename", std::make_shared<configuration_attribute>(skin_2_filename));
std::string skin_3_filename = node.node().attribute("skin_3_filename").as_string();
configuration::set_attribute("/car/skin_3_filename", std::make_shared<configuration_attribute>(skin_3_filename));
f32 fl_wheel_offset_x = node.node().attribute("fl_wheel_offset_x").as_float();
configuration::set_attribute("/car/fl_wheel_offset_x", std::make_shared<configuration_attribute>(fl_wheel_offset_x));
f32 fl_wheel_offset_y = node.node().attribute("fl_wheel_offset_y").as_float();
configuration::set_attribute("/car/fl_wheel_offset_y", std::make_shared<configuration_attribute>(fl_wheel_offset_y));
f32 fl_wheel_offset_z = node.node().attribute("fl_wheel_offset_z").as_float();
configuration::set_attribute("/car/fl_wheel_offset_z", std::make_shared<configuration_attribute>(fl_wheel_offset_z));
f32 fr_wheel_offset_x = node.node().attribute("fr_wheel_offset_x").as_float();
configuration::set_attribute("/car/fr_wheel_offset_x", std::make_shared<configuration_attribute>(fr_wheel_offset_x));
f32 fr_wheel_offset_y = node.node().attribute("fr_wheel_offset_y").as_float();
configuration::set_attribute("/car/fr_wheel_offset_y", std::make_shared<configuration_attribute>(fr_wheel_offset_y));
f32 fr_wheel_offset_z = node.node().attribute("fr_wheel_offset_z").as_float();
configuration::set_attribute("/car/fr_wheel_offset_z", std::make_shared<configuration_attribute>(fr_wheel_offset_z));
f32 rl_wheel_offset_x = node.node().attribute("rl_wheel_offset_x").as_float();
configuration::set_attribute("/car/rl_wheel_offset_x", std::make_shared<configuration_attribute>(rl_wheel_offset_x));
f32 rl_wheel_offset_y = node.node().attribute("rl_wheel_offset_y").as_float();
configuration::set_attribute("/car/rl_wheel_offset_y", std::make_shared<configuration_attribute>(rl_wheel_offset_y));
f32 rl_wheel_offset_z = node.node().attribute("rl_wheel_offset_z").as_float();
configuration::set_attribute("/car/rl_wheel_offset_z", std::make_shared<configuration_attribute>(rl_wheel_offset_z));
f32 rr_wheel_offset_x = node.node().attribute("rr_wheel_offset_x").as_float();
configuration::set_attribute("/car/rr_wheel_offset_x", std::make_shared<configuration_attribute>(rr_wheel_offset_x));
f32 rr_wheel_offset_y = node.node().attribute("rr_wheel_offset_y").as_float();
configuration::set_attribute("/car/rr_wheel_offset_y", std::make_shared<configuration_attribute>(rr_wheel_offset_y));
f32 rr_wheel_offset_z = node.node().attribute("rr_wheel_offset_z").as_float();
configuration::set_attribute("/car/rr_wheel_offset_z", std::make_shared<configuration_attribute>(rr_wheel_offset_z));
f32 fl_light_offset_x = node.node().attribute("fl_light_offset_x").as_float();
configuration::set_attribute("/car/fl_light_offset_x", std::make_shared<configuration_attribute>(fl_light_offset_x));
f32 fl_light_offset_y = node.node().attribute("fl_light_offset_y").as_float();
configuration::set_attribute("/car/fl_light_offset_y", std::make_shared<configuration_attribute>(fl_light_offset_y));
f32 fl_light_offset_z = node.node().attribute("fl_light_offset_z").as_float();
configuration::set_attribute("/car/fl_light_offset_z", std::make_shared<configuration_attribute>(fl_light_offset_z));
f32 fr_light_offset_x = node.node().attribute("fr_light_offset_x").as_float();
configuration::set_attribute("/car/fr_light_offset_x", std::make_shared<configuration_attribute>(fr_light_offset_x));
f32 fr_light_offset_y = node.node().attribute("fr_light_offset_y").as_float();
configuration::set_attribute("/car/fr_light_offset_y", std::make_shared<configuration_attribute>(fr_light_offset_y));
f32 fr_light_offset_z = node.node().attribute("fr_light_offset_z").as_float();
configuration::set_attribute("/car/fr_light_offset_z", std::make_shared<configuration_attribute>(fr_light_offset_z));
f32 rl_light_offset_x = node.node().attribute("rl_light_offset_x").as_float();
configuration::set_attribute("/car/rl_light_offset_x", std::make_shared<configuration_attribute>(rl_light_offset_x));
f32 rl_light_offset_y = node.node().attribute("rl_light_offset_y").as_float();
configuration::set_attribute("/car/rl_light_offset_y", std::make_shared<configuration_attribute>(rl_light_offset_y));
f32 rl_light_offset_z = node.node().attribute("rl_light_offset_z").as_float();
configuration::set_attribute("/car/rl_light_offset_z", std::make_shared<configuration_attribute>(rl_light_offset_z));
f32 rr_light_offset_x = node.node().attribute("rr_light_offset_x").as_float();
configuration::set_attribute("/car/rr_light_offset_x", std::make_shared<configuration_attribute>(rr_light_offset_x));
f32 rr_light_offset_y = node.node().attribute("rr_light_offset_y").as_float();
configuration::set_attribute("/car/rr_light_offset_y", std::make_shared<configuration_attribute>(rr_light_offset_y));
f32 rr_light_offset_z = node.node().attribute("rr_light_offset_z").as_float();
configuration::set_attribute("/car/rr_light_offset_z", std::make_shared<configuration_attribute>(rr_light_offset_z));
}
void car_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string main_3d_configuration_filename = json.get("main_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/car/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
std::string wheel_l_3d_configuration_filename = json.get("wheel_l_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/car/wheel_l_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_l_3d_configuration_filename));
std::string wheel_r_3d_configuration_filename = json.get("wheel_r_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/car/wheel_r_3d_configuration_filename", std::make_shared<configuration_attribute>(wheel_r_3d_configuration_filename));
std::string skin_1_filename = json.get("skin_1_filename", "unknown").asString();
configuration::set_attribute("/car/skin_1_filename", std::make_shared<configuration_attribute>(skin_1_filename));
std::string skin_2_filename = json.get("skin_2_filename", "unknown").asString();
configuration::set_attribute("/car/skin_2_filename", std::make_shared<configuration_attribute>(skin_2_filename));
std::string skin_3_filename = json.get("skin_3_filename", "unknown").asString();
configuration::set_attribute("/car/skin_3_filename", std::make_shared<configuration_attribute>(skin_3_filename));
f32 fl_wheel_offset_x = json.get("fl_wheel_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/fl_wheel_offset_x", std::make_shared<configuration_attribute>(fl_wheel_offset_x));
f32 fl_wheel_offset_y = json.get("fl_wheel_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/fl_wheel_offset_y", std::make_shared<configuration_attribute>(fl_wheel_offset_y));
f32 fl_wheel_offset_z = json.get("fl_wheel_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/fl_wheel_offset_z", std::make_shared<configuration_attribute>(fl_wheel_offset_z));
f32 fr_wheel_offset_x = json.get("fr_wheel_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/fr_wheel_offset_x", std::make_shared<configuration_attribute>(fr_wheel_offset_x));
f32 fr_wheel_offset_y = json.get("fr_wheel_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/fr_wheel_offset_y", std::make_shared<configuration_attribute>(fr_wheel_offset_y));
f32 fr_wheel_offset_z = json.get("fr_wheel_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/fr_wheel_offset_z", std::make_shared<configuration_attribute>(fr_wheel_offset_z));
f32 rl_wheel_offset_x = json.get("rl_wheel_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/rl_wheel_offset_x", std::make_shared<configuration_attribute>(rl_wheel_offset_x));
f32 rl_wheel_offset_y = json.get("rl_wheel_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/rl_wheel_offset_y", std::make_shared<configuration_attribute>(rl_wheel_offset_y));
f32 rl_wheel_offset_z = json.get("rl_wheel_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/rl_wheel_offset_z", std::make_shared<configuration_attribute>(rl_wheel_offset_z));
f32 rr_wheel_offset_x = json.get("rr_wheel_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/rr_wheel_offset_x", std::make_shared<configuration_attribute>(rr_wheel_offset_x));
f32 rr_wheel_offset_y = json.get("rr_wheel_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/rr_wheel_offset_y", std::make_shared<configuration_attribute>(rr_wheel_offset_y));
f32 rr_wheel_offset_z = json.get("rr_wheel_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/rr_wheel_offset_z", std::make_shared<configuration_attribute>(rr_wheel_offset_z));
f32 fl_light_offset_x = json.get("fl_light_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/fl_light_offset_x", std::make_shared<configuration_attribute>(fl_light_offset_x));
f32 fl_light_offset_y = json.get("fl_light_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/fl_light_offset_y", std::make_shared<configuration_attribute>(fl_light_offset_y));
f32 fl_light_offset_z = json.get("fl_light_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/fl_light_offset_z", std::make_shared<configuration_attribute>(fl_light_offset_z));
f32 fr_light_offset_x = json.get("fr_light_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/fr_light_offset_x", std::make_shared<configuration_attribute>(fr_light_offset_x));
f32 fr_light_offset_y = json.get("fr_light_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/fr_light_offset_y", std::make_shared<configuration_attribute>(fr_light_offset_y));
f32 fr_light_offset_z = json.get("fr_light_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/fr_light_offset_z", std::make_shared<configuration_attribute>(fr_light_offset_z));
f32 rl_light_offset_x = json.get("rl_light_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/rl_light_offset_x", std::make_shared<configuration_attribute>(rl_light_offset_x));
f32 rl_light_offset_y = json.get("rl_light_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/rl_light_offset_y", std::make_shared<configuration_attribute>(rl_light_offset_y));
f32 rl_light_offset_z = json.get("rl_light_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/rl_light_offset_z", std::make_shared<configuration_attribute>(rl_light_offset_z));
f32 rr_light_offset_x = json.get("rr_light_offset_x", 0.f).asFloat();
configuration::set_attribute("/car/rr_light_offset_x", std::make_shared<configuration_attribute>(rr_light_offset_x));
f32 rr_light_offset_y = json.get("rr_light_offset_y", 0.f).asFloat();
configuration::set_attribute("/car/rr_light_offset_y", std::make_shared<configuration_attribute>(rr_light_offset_y));
f32 rr_light_offset_z = json.get("rr_light_offset_z", 0.f).asFloat();
configuration::set_attribute("/car/rr_light_offset_z", std::make_shared<configuration_attribute>(rr_light_offset_z));
}
}
