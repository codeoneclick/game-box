// autogenerated: do not add any changes
#include "cell_configuration.h"
namespace gb
{
std::string cell_configuration::get_main_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/cell/main_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void cell_configuration::set_main_3d_configuration_filename(std::string main_3d_configuration_filename)
{
configuration::set_attribute("/cell/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
}
#endif
void cell_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/cell");
std::string main_3d_configuration_filename = node.node().attribute("main_3d_configuration_filename").as_string();
configuration::set_attribute("/cell/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
}
void cell_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string main_3d_configuration_filename = json.get("main_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/cell/main_3d_configuration_filename", std::make_shared<configuration_attribute>(main_3d_configuration_filename));
}
}
