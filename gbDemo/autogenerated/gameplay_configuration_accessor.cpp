// autogenerated: do not add any changes, added changes will be lost.
#include "gameplay_configuration_accessor.h"
namespace gb
{
std::shared_ptr<configuration> gameplay_configuration_accessor::get_level_configuration(const std::string& filename)
{
std::shared_ptr<level_configuration> configuration = nullptr;
const auto configuration_it = m_configurations_pool.find(filename);
if (configuration_it == m_configurations_pool.end())
{
configuration = std::make_shared<level_configuration>();
m_configurations_pool[filename] = configuration;
if(filename.find(".xml") != std::string::npos)
{
configuration->serialize_xml(filename);
}
else if(filename.find(".json") != std::string::npos)
{
configuration->serialize_json(filename);
}
else
{
assert(false);
}
}
else
{
configuration = std::static_pointer_cast<level_configuration>(configuration_it->second);
}
assert(configuration);
return configuration;
}
std::shared_ptr<configuration> gameplay_configuration_accessor::get_car_configuration(const std::string& filename)
{
std::shared_ptr<car_configuration> configuration = nullptr;
const auto configuration_it = m_configurations_pool.find(filename);
if (configuration_it == m_configurations_pool.end())
{
configuration = std::make_shared<car_configuration>();
m_configurations_pool[filename] = configuration;
if(filename.find(".xml") != std::string::npos)
{
configuration->serialize_xml(filename);
}
else if(filename.find(".json") != std::string::npos)
{
configuration->serialize_json(filename);
}
else
{
assert(false);
}
}
else
{
configuration = std::static_pointer_cast<car_configuration>(configuration_it->second);
}
assert(configuration);
return configuration;
}
std::shared_ptr<configuration> gameplay_configuration_accessor::get_levels_set_configuration(const std::string& filename)
{
std::shared_ptr<levels_set_configuration> configuration = nullptr;
const auto configuration_it = m_configurations_pool.find(filename);
if (configuration_it == m_configurations_pool.end())
{
configuration = std::make_shared<levels_set_configuration>();
m_configurations_pool[filename] = configuration;
if(filename.find(".xml") != std::string::npos)
{
configuration->serialize_xml(filename);
}
else if(filename.find(".json") != std::string::npos)
{
configuration->serialize_json(filename);
}
else
{
assert(false);
}
}
else
{
configuration = std::static_pointer_cast<levels_set_configuration>(configuration_it->second);
}
assert(configuration);
return configuration;
}
std::shared_ptr<configuration> gameplay_configuration_accessor::get_car_progression_configuration(const std::string& filename)
{
std::shared_ptr<car_progression_configuration> configuration = nullptr;
const auto configuration_it = m_configurations_pool.find(filename);
if (configuration_it == m_configurations_pool.end())
{
configuration = std::make_shared<car_progression_configuration>();
m_configurations_pool[filename] = configuration;
if(filename.find(".xml") != std::string::npos)
{
configuration->serialize_xml(filename);
}
else if(filename.find(".json") != std::string::npos)
{
configuration->serialize_json(filename);
}
else
{
assert(false);
}
}
else
{
configuration = std::static_pointer_cast<car_progression_configuration>(configuration_it->second);
}
assert(configuration);
return configuration;
}
std::shared_ptr<configuration> gameplay_configuration_accessor::get_cars_progression_configuration(const std::string& filename)
{
std::shared_ptr<cars_progression_configuration> configuration = nullptr;
const auto configuration_it = m_configurations_pool.find(filename);
if (configuration_it == m_configurations_pool.end())
{
configuration = std::make_shared<cars_progression_configuration>();
m_configurations_pool[filename] = configuration;
if(filename.find(".xml") != std::string::npos)
{
configuration->serialize_xml(filename);
}
else if(filename.find(".json") != std::string::npos)
{
configuration->serialize_json(filename);
}
else
{
assert(false);
}
}
else
{
configuration = std::static_pointer_cast<cars_progression_configuration>(configuration_it->second);
}
assert(configuration);
return configuration;
}
}
