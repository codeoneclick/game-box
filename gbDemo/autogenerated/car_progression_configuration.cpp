// autogenerated: do not add any changes
#include "car_progression_configuration.h"
namespace gb
{
std::string car_progression_configuration::get_car_filename(void) const
{
const auto& iterator = m_attributes.find("/car_progression/car_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_progression_configuration::set_car_filename(std::string car_filename)
{
configuration::set_attribute("/car_progression/car_filename", std::make_shared<configuration_attribute>(car_filename));
}
#endif
i32 car_progression_configuration::get_car_id(void) const
{
const auto& iterator = m_attributes.find("/car_progression/car_id");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_progression_configuration::set_car_id(i32 car_id)
{
configuration::set_attribute("/car_progression/car_id", std::make_shared<configuration_attribute>(car_id));
}
#endif
i32 car_progression_configuration::get_required_rank(void) const
{
const auto& iterator = m_attributes.find("/car_progression/required_rank");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_progression_configuration::set_required_rank(i32 required_rank)
{
configuration::set_attribute("/car_progression/required_rank", std::make_shared<configuration_attribute>(required_rank));
}
#endif
i32 car_progression_configuration::get_required_stars_for_next_rank(void) const
{
const auto& iterator = m_attributes.find("/car_progression/required_stars_for_next_rank");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void car_progression_configuration::set_required_stars_for_next_rank(i32 required_stars_for_next_rank)
{
configuration::set_attribute("/car_progression/required_stars_for_next_rank", std::make_shared<configuration_attribute>(required_stars_for_next_rank));
}
#endif
void car_progression_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/car_progression");
std::string car_filename = node.node().attribute("car_filename").as_string();
configuration::set_attribute("/car_progression/car_filename", std::make_shared<configuration_attribute>(car_filename));
i32 car_id = node.node().attribute("car_id").as_int();
configuration::set_attribute("/car_progression/car_id", std::make_shared<configuration_attribute>(car_id));
i32 required_rank = node.node().attribute("required_rank").as_int();
configuration::set_attribute("/car_progression/required_rank", std::make_shared<configuration_attribute>(required_rank));
i32 required_stars_for_next_rank = node.node().attribute("required_stars_for_next_rank").as_int();
configuration::set_attribute("/car_progression/required_stars_for_next_rank", std::make_shared<configuration_attribute>(required_stars_for_next_rank));
}
void car_progression_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string car_filename = json.get("car_filename", "unknown").asString();
configuration::set_attribute("/car_progression/car_filename", std::make_shared<configuration_attribute>(car_filename));
i32 car_id = json.get("car_id", 0).asInt();
configuration::set_attribute("/car_progression/car_id", std::make_shared<configuration_attribute>(car_id));
i32 required_rank = json.get("required_rank", 0).asInt();
configuration::set_attribute("/car_progression/required_rank", std::make_shared<configuration_attribute>(required_rank));
i32 required_stars_for_next_rank = json.get("required_stars_for_next_rank", 0).asInt();
configuration::set_attribute("/car_progression/required_stars_for_next_rank", std::make_shared<configuration_attribute>(required_stars_for_next_rank));
}
}
