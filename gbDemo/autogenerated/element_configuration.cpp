// autogenerated: do not add any changes
#include "element_configuration.h"
namespace gb
{
std::string element_configuration::get_red_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/element/red_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void element_configuration::set_red_3d_configuration_filename(std::string red_3d_configuration_filename)
{
configuration::set_attribute("/element/red_3d_configuration_filename", std::make_shared<configuration_attribute>(red_3d_configuration_filename));
}
#endif
std::string element_configuration::get_green_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/element/green_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void element_configuration::set_green_3d_configuration_filename(std::string green_3d_configuration_filename)
{
configuration::set_attribute("/element/green_3d_configuration_filename", std::make_shared<configuration_attribute>(green_3d_configuration_filename));
}
#endif
std::string element_configuration::get_blue_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/element/blue_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void element_configuration::set_blue_3d_configuration_filename(std::string blue_3d_configuration_filename)
{
configuration::set_attribute("/element/blue_3d_configuration_filename", std::make_shared<configuration_attribute>(blue_3d_configuration_filename));
}
#endif
std::string element_configuration::get_yellow_3d_configuration_filename(void) const
{
const auto& iterator = m_attributes.find("/element/yellow_3d_configuration_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__IS_CONFIGURATION_MUTABLE__)
void element_configuration::set_yellow_3d_configuration_filename(std::string yellow_3d_configuration_filename)
{
configuration::set_attribute("/element/yellow_3d_configuration_filename", std::make_shared<configuration_attribute>(yellow_3d_configuration_filename));
}
#endif
void element_configuration::serialize_xml(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = configuration::open_xml(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/element");
std::string red_3d_configuration_filename = node.node().attribute("red_3d_configuration_filename").as_string();
configuration::set_attribute("/element/red_3d_configuration_filename", std::make_shared<configuration_attribute>(red_3d_configuration_filename));
std::string green_3d_configuration_filename = node.node().attribute("green_3d_configuration_filename").as_string();
configuration::set_attribute("/element/green_3d_configuration_filename", std::make_shared<configuration_attribute>(green_3d_configuration_filename));
std::string blue_3d_configuration_filename = node.node().attribute("blue_3d_configuration_filename").as_string();
configuration::set_attribute("/element/blue_3d_configuration_filename", std::make_shared<configuration_attribute>(blue_3d_configuration_filename));
std::string yellow_3d_configuration_filename = node.node().attribute("yellow_3d_configuration_filename").as_string();
configuration::set_attribute("/element/yellow_3d_configuration_filename", std::make_shared<configuration_attribute>(yellow_3d_configuration_filename));
}
void element_configuration::serialize_json(const std::string& filename)
{
Json::Value json;
bool result = configuration::open_json(json, filename);
assert(result);
std::string red_3d_configuration_filename = json.get("red_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/element/red_3d_configuration_filename", std::make_shared<configuration_attribute>(red_3d_configuration_filename));
std::string green_3d_configuration_filename = json.get("green_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/element/green_3d_configuration_filename", std::make_shared<configuration_attribute>(green_3d_configuration_filename));
std::string blue_3d_configuration_filename = json.get("blue_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/element/blue_3d_configuration_filename", std::make_shared<configuration_attribute>(blue_3d_configuration_filename));
std::string yellow_3d_configuration_filename = json.get("yellow_3d_configuration_filename", "unknown").asString();
configuration::set_attribute("/element/yellow_3d_configuration_filename", std::make_shared<configuration_attribute>(yellow_3d_configuration_filename));
}
}
